{
    "swagger": "2.0", 
    "info": {
        "title": "NAAS Component", 
        "description": "This is Swagger UI environment generated for the TMF NAAS Component specification", 
        "version": "3.0"
    }, 
    "host": "serverRoot", 
    "basePath": "/tmf-api/naas/v3/", 
    "schemes": [
        "https"
    ], 
    "consumes": [
        "application/json;charset=utf-8"
    ], 
    "produces": [
        "application/json;charset=utf-8"
    ], 
    "tags": [
        {
            "name": "service"
        }, 
        {
            "name": "serviceCatalog"
        }, 
        {
            "name": "serviceCategory"
        }, 
        {
            "name": "serviceCandidate"
        }, 
        {
            "name": "serviceQualification"
        }, 
        {
            "name": "serviceProblem"
        }, 
        {
            "name": "serviceSpecification"
        }, 
        {
            "name": "serviceTest"
        }, 
        {
            "name": "serviceTestSpecification"
        }, 
        {
            "name": "usageConsumptionReportRequest"
        }, 
        {
            "name": "usageConsumptionReport"
        }, 
        {
            "name": "importJob"
        }, 
        {
            "name": "exportJob"
        }, 
        {
            "name": "notification listeners (client side)"
        }, 
        {
            "name": "events subscription"
        }
    ], 
    "paths": {
        "/service": {
            "get": {
                "operationId": "listService", 
                "summary": "List or find Service objects", 
                "description": "This operation list or find Service entities", 
                "tags": [
                    "service"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma-separated properties to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Service"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createService", 
                "summary": "Creates a Service", 
                "description": "This operation creates a Service entity.", 
                "tags": [
                    "service"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/Service_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "service", 
                        "description": "The Service to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/Service"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/service/{id}": {
            "get": {
                "operationId": "retrieveService", 
                "summary": "Retrieves a Service by ID", 
                "description": "This operation retrieves a Service entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "service"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Service"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Comma-separated properties to provide in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/Service"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchService", 
                "summary": "Updates partially a Service", 
                "description": "This operation updates partially a Service entity.", 
                "tags": [
                    "service"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Service"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/Service_Update"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "service", 
                        "description": "The Service to be updated"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/Service"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteService", 
                "summary": "Deletes a Service", 
                "description": "This operation deletes a Service entity.", 
                "tags": [
                    "service"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the Service"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceCatalog": {
            "get": {
                "operationId": "listServiceCatalog", 
                "summary": "List or find ServiceCatalog objects", 
                "description": "This operation list or find ServiceCatalog entities", 
                "tags": [
                    "serviceCatalog"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma-separated properties to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceCatalog"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createServiceCatalog", 
                "summary": "Creates a ServiceCatalog", 
                "description": "This operation creates a ServiceCatalog entity.", 
                "tags": [
                    "serviceCatalog"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalog_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceCatalog", 
                        "description": "The ServiceCatalog to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalog"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceCatalog/{id}": {
            "get": {
                "operationId": "retrieveServiceCatalog", 
                "summary": "Retrieves a ServiceCatalog by ID", 
                "description": "This operation retrieves a ServiceCatalog entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "serviceCatalog"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceCatalog"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Comma-separated properties to provide in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalog"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchServiceCatalog", 
                "summary": "Updates partially a ServiceCatalog", 
                "description": "This operation updates partially a ServiceCatalog entity.", 
                "tags": [
                    "serviceCatalog"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceCatalog"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalog_Update"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceCatalog", 
                        "description": "The ServiceCatalog to be updated"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalog"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteServiceCatalog", 
                "summary": "Deletes a ServiceCatalog", 
                "description": "This operation deletes a ServiceCatalog entity.", 
                "tags": [
                    "serviceCatalog"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceCatalog"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceCategory": {
            "get": {
                "operationId": "listServiceCategory", 
                "summary": "List or find ServiceCategory objects", 
                "description": "This operation list or find ServiceCategory entities", 
                "tags": [
                    "serviceCategory"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma-separated properties to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceCategory"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createServiceCategory", 
                "summary": "Creates a ServiceCategory", 
                "description": "This operation creates a ServiceCategory entity.", 
                "tags": [
                    "serviceCategory"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCategory_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceCategory", 
                        "description": "The ServiceCategory to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ServiceCategory"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceCategory/{id}": {
            "get": {
                "operationId": "retrieveServiceCategory", 
                "summary": "Retrieves a ServiceCategory by ID", 
                "description": "This operation retrieves a ServiceCategory entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "serviceCategory"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceCategory"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Comma-separated properties to provide in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceCategory"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchServiceCategory", 
                "summary": "Updates partially a ServiceCategory", 
                "description": "This operation updates partially a ServiceCategory entity.", 
                "tags": [
                    "serviceCategory"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceCategory"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCategory_Update"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceCategory", 
                        "description": "The ServiceCategory to be updated"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/ServiceCategory"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteServiceCategory", 
                "summary": "Deletes a ServiceCategory", 
                "description": "This operation deletes a ServiceCategory entity.", 
                "tags": [
                    "serviceCategory"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceCategory"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceCandidate": {
            "get": {
                "operationId": "listServiceCandidate", 
                "summary": "List or find ServiceCandidate objects", 
                "description": "This operation list or find ServiceCandidate entities", 
                "tags": [
                    "serviceCandidate"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma-separated properties to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceCandidate"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createServiceCandidate", 
                "summary": "Creates a ServiceCandidate", 
                "description": "This operation creates a ServiceCandidate entity.", 
                "tags": [
                    "serviceCandidate"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCandidate_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceCandidate", 
                        "description": "The ServiceCandidate to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ServiceCandidate"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceCandidate/{id}": {
            "get": {
                "operationId": "retrieveServiceCandidate", 
                "summary": "Retrieves a ServiceCandidate by ID", 
                "description": "This operation retrieves a ServiceCandidate entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "serviceCandidate"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceCandidate"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Comma-separated properties to provide in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceCandidate"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchServiceCandidate", 
                "summary": "Updates partially a ServiceCandidate", 
                "description": "This operation updates partially a ServiceCandidate entity.", 
                "tags": [
                    "serviceCandidate"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceCandidate"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCandidate_Update"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceCandidate", 
                        "description": "The ServiceCandidate to be updated"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/ServiceCandidate"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteServiceCandidate", 
                "summary": "Deletes a ServiceCandidate", 
                "description": "This operation deletes a ServiceCandidate entity.", 
                "tags": [
                    "serviceCandidate"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceCandidate"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceQualification": {
            "get": {
                "operationId": "listServiceQualification", 
                "summary": "List or find ServiceQualification objects", 
                "description": "This operation list or find ServiceQualification entities", 
                "tags": [
                    "serviceQualification"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma-separated properties to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceQualification"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createServiceQualification", 
                "summary": "Creates a ServiceQualification", 
                "description": "This operation creates a ServiceQualification entity.", 
                "tags": [
                    "serviceQualification"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceQualification_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceQualification", 
                        "description": "The ServiceQualification to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ServiceQualification"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceQualification/{id}": {
            "get": {
                "operationId": "retrieveServiceQualification", 
                "summary": "Retrieves a ServiceQualification by ID", 
                "description": "This operation retrieves a ServiceQualification entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "serviceQualification"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceQualification"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Comma-separated properties to provide in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceQualification"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchServiceQualification", 
                "summary": "Updates partially a ServiceQualification", 
                "description": "This operation updates partially a ServiceQualification entity.", 
                "tags": [
                    "serviceQualification"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceQualification"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceQualification_Update"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceQualification", 
                        "description": "The ServiceQualification to be updated"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/ServiceQualification"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteServiceQualification", 
                "summary": "Deletes a ServiceQualification", 
                "description": "This operation deletes a ServiceQualification entity.", 
                "tags": [
                    "serviceQualification"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceQualification"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceProblem": {
            "get": {
                "operationId": "listServiceProblem", 
                "summary": "List or find ServiceProblem objects", 
                "description": "This operation list or find ServiceProblem entities", 
                "tags": [
                    "serviceProblem"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma-separated properties to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceProblem"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createServiceProblem", 
                "summary": "Creates a ServiceProblem", 
                "description": "This operation creates a ServiceProblem entity.", 
                "tags": [
                    "serviceProblem"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceProblem_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceProblem", 
                        "description": "The ServiceProblem to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ServiceProblem"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceProblem/{id}": {
            "get": {
                "operationId": "retrieveServiceProblem", 
                "summary": "Retrieves a ServiceProblem by ID", 
                "description": "This operation retrieves a ServiceProblem entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "serviceProblem"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceProblem"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Comma-separated properties to provide in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceProblem"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchServiceProblem", 
                "summary": "Updates partially a ServiceProblem", 
                "description": "This operation updates partially a ServiceProblem entity.", 
                "tags": [
                    "serviceProblem"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceProblem"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceProblem_Update"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceProblem", 
                        "description": "The ServiceProblem to be updated"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/ServiceProblem"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteServiceProblem", 
                "summary": "Deletes a ServiceProblem", 
                "description": "This operation deletes a ServiceProblem entity.", 
                "tags": [
                    "serviceProblem"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceProblem"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceSpecification": {
            "get": {
                "operationId": "listServiceSpecification", 
                "summary": "List or find ServiceSpecification objects", 
                "description": "This operation list or find ServiceSpecification entities", 
                "tags": [
                    "serviceSpecification"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma-separated properties to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceSpecification"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createServiceSpecification", 
                "summary": "Creates a ServiceSpecification", 
                "description": "This operation creates a ServiceSpecification entity.", 
                "tags": [
                    "serviceSpecification"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceSpecification_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceSpecification", 
                        "description": "The ServiceSpecification to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ServiceSpecification"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceSpecification/{id}": {
            "get": {
                "operationId": "retrieveServiceSpecification", 
                "summary": "Retrieves a ServiceSpecification by ID", 
                "description": "This operation retrieves a ServiceSpecification entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "serviceSpecification"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceSpecification"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Comma-separated properties to provide in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceSpecification"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchServiceSpecification", 
                "summary": "Updates partially a ServiceSpecification", 
                "description": "This operation updates partially a ServiceSpecification entity.", 
                "tags": [
                    "serviceSpecification"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceSpecification"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceSpecification_Update"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceSpecification", 
                        "description": "The ServiceSpecification to be updated"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/ServiceSpecification"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteServiceSpecification", 
                "summary": "Deletes a ServiceSpecification", 
                "description": "This operation deletes a ServiceSpecification entity.", 
                "tags": [
                    "serviceSpecification"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceSpecification"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceTest": {
            "get": {
                "operationId": "listServiceTest", 
                "summary": "List or find ServiceTest objects", 
                "description": "This operation list or find ServiceTest entities", 
                "tags": [
                    "serviceTest"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma-separated properties to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceTest"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createServiceTest", 
                "summary": "Creates a ServiceTest", 
                "description": "This operation creates a ServiceTest entity.", 
                "tags": [
                    "serviceTest"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceTest_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceTest", 
                        "description": "The ServiceTest to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ServiceTest"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceTest/{id}": {
            "get": {
                "operationId": "retrieveServiceTest", 
                "summary": "Retrieves a ServiceTest by ID", 
                "description": "This operation retrieves a ServiceTest entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "serviceTest"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceTest"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Comma-separated properties to provide in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceTest"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchServiceTest", 
                "summary": "Updates partially a ServiceTest", 
                "description": "This operation updates partially a ServiceTest entity.", 
                "tags": [
                    "serviceTest"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceTest"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceTest_Update"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceTest", 
                        "description": "The ServiceTest to be updated"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/ServiceTest"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteServiceTest", 
                "summary": "Deletes a ServiceTest", 
                "description": "This operation deletes a ServiceTest entity.", 
                "tags": [
                    "serviceTest"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceTest"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceTestSpecification": {
            "get": {
                "operationId": "listServiceTestSpecification", 
                "summary": "List or find ServiceTestSpecification objects", 
                "description": "This operation list or find ServiceTestSpecification entities", 
                "tags": [
                    "serviceTestSpecification"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma-separated properties to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ServiceTestSpecification"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createServiceTestSpecification", 
                "summary": "Creates a ServiceTestSpecification", 
                "description": "This operation creates a ServiceTestSpecification entity.", 
                "tags": [
                    "serviceTestSpecification"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecification_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceTestSpecification", 
                        "description": "The ServiceTestSpecification to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecification"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/serviceTestSpecification/{id}": {
            "get": {
                "operationId": "retrieveServiceTestSpecification", 
                "summary": "Retrieves a ServiceTestSpecification by ID", 
                "description": "This operation retrieves a ServiceTestSpecification entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "serviceTestSpecification"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceTestSpecification"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Comma-separated properties to provide in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecification"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "patch": {
                "operationId": "patchServiceTestSpecification", 
                "summary": "Updates partially a ServiceTestSpecification", 
                "description": "This operation updates partially a ServiceTestSpecification entity.", 
                "tags": [
                    "serviceTestSpecification"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceTestSpecification"
                    }, 
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecification_Update"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "serviceTestSpecification", 
                        "description": "The ServiceTestSpecification to be updated"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Updated", 
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecification"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteServiceTestSpecification", 
                "summary": "Deletes a ServiceTestSpecification", 
                "description": "This operation deletes a ServiceTestSpecification entity.", 
                "tags": [
                    "serviceTestSpecification"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ServiceTestSpecification"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/usageConsumptionReportRequest": {
            "get": {
                "operationId": "listUsageConsumptionReportRequest", 
                "summary": "List or find UsageConsumptionReportRequest objects", 
                "description": "This operation list or find UsageConsumptionReportRequest entities", 
                "tags": [
                    "usageConsumptionReportRequest"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma-separated properties to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/UsageConsumptionReportRequest"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createUsageConsumptionReportRequest", 
                "summary": "Creates a UsageConsumptionReportRequest", 
                "description": "This operation creates a UsageConsumptionReportRequest entity.", 
                "tags": [
                    "usageConsumptionReportRequest"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/UsageConsumptionReportRequest_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "usageConsumptionReportRequest", 
                        "description": "The UsageConsumptionReportRequest to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/UsageConsumptionReportRequest"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/usageConsumptionReportRequest/{id}": {
            "get": {
                "operationId": "retrieveUsageConsumptionReportRequest", 
                "summary": "Retrieves a UsageConsumptionReportRequest by ID", 
                "description": "This operation retrieves a UsageConsumptionReportRequest entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "usageConsumptionReportRequest"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the UsageConsumptionReportRequest"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Comma-separated properties to provide in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/UsageConsumptionReportRequest"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteUsageConsumptionReportRequest", 
                "summary": "Deletes a UsageConsumptionReportRequest", 
                "description": "This operation deletes a UsageConsumptionReportRequest entity.", 
                "tags": [
                    "usageConsumptionReportRequest"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the UsageConsumptionReportRequest"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/usageConsumptionReport": {
            "get": {
                "operationId": "listUsageConsumptionReport", 
                "summary": "List or find UsageConsumptionReport objects", 
                "description": "This operation list or find UsageConsumptionReport entities", 
                "tags": [
                    "usageConsumptionReport"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma-separated properties to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/UsageConsumptionReport"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/usageConsumptionReport/{id}": {
            "get": {
                "operationId": "retrieveUsageConsumptionReport", 
                "summary": "Retrieves a UsageConsumptionReport by ID", 
                "description": "This operation retrieves a UsageConsumptionReport entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "usageConsumptionReport"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the UsageConsumptionReport"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Comma-separated properties to provide in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/UsageConsumptionReport"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteUsageConsumptionReport", 
                "summary": "Deletes a UsageConsumptionReport", 
                "description": "This operation deletes a UsageConsumptionReport entity.", 
                "tags": [
                    "usageConsumptionReport"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the UsageConsumptionReport"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/importJob": {
            "get": {
                "operationId": "listImportJob", 
                "summary": "List or find ImportJob objects", 
                "description": "This operation list or find ImportJob entities", 
                "tags": [
                    "importJob"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma-separated properties to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ImportJob"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createImportJob", 
                "summary": "Creates a ImportJob", 
                "description": "This operation creates a ImportJob entity.", 
                "tags": [
                    "importJob"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ImportJob_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "importJob", 
                        "description": "The ImportJob to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ImportJob"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/importJob/{id}": {
            "get": {
                "operationId": "retrieveImportJob", 
                "summary": "Retrieves a ImportJob by ID", 
                "description": "This operation retrieves a ImportJob entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "importJob"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ImportJob"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Comma-separated properties to provide in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ImportJob"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteImportJob", 
                "summary": "Deletes a ImportJob", 
                "description": "This operation deletes a ImportJob entity.", 
                "tags": [
                    "importJob"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ImportJob"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/exportJob": {
            "get": {
                "operationId": "listExportJob", 
                "summary": "List or find ExportJob objects", 
                "description": "This operation list or find ExportJob entities", 
                "tags": [
                    "exportJob"
                ], 
                "parameters": [
                    {
                        "type": "string", 
                        "required": false, 
                        "in": "query", 
                        "name": "fields", 
                        "description": "Comma-separated properties to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "offset", 
                        "description": "Requested index for start of resources to be provided in response"
                    }, 
                    {
                        "type": "integer", 
                        "required": false, 
                        "in": "query", 
                        "name": "limit", 
                        "description": "Requested number of resources to be provided in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "headers": {
                            "X-Total-Count": {
                                "type": "integer", 
                                "description": "Total number of items matching criteria"
                            }, 
                            "X-Result-Count": {
                                "type": "integer", 
                                "description": "Actual number of items returned in the response body"
                            }
                        }, 
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ExportJob"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "post": {
                "operationId": "createExportJob", 
                "summary": "Creates a ExportJob", 
                "description": "This operation creates a ExportJob entity.", 
                "tags": [
                    "exportJob"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ExportJob_Create"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "name": "exportJob", 
                        "description": "The ExportJob to be created"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/ExportJob"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/exportJob/{id}": {
            "get": {
                "operationId": "retrieveExportJob", 
                "summary": "Retrieves a ExportJob by ID", 
                "description": "This operation retrieves a ExportJob entity. Attribute selection is enabled for all first level attributes.", 
                "tags": [
                    "exportJob"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ExportJob"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "fields", 
                        "in": "query", 
                        "description": "Comma-separated properties to provide in response"
                    }
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ExportJob"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }, 
            "delete": {
                "operationId": "deleteExportJob", 
                "summary": "Deletes a ExportJob", 
                "description": "This operation deletes a ExportJob entity.", 
                "tags": [
                    "exportJob"
                ], 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path", 
                        "description": "Identifier of the ExportJob"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/hub": {
            "post": {
                "operationId": "registerListener", 
                "summary": "Register a listener", 
                "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.", 
                "tags": [
                    "events subscription"
                ], 
                "parameters": [
                    {
                        "name": "data", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscriptionInput"
                        }, 
                        "required": true, 
                        "in": "body", 
                        "description": "Data containing the callback endpoint to deliver the information"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Subscribed", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/hub/{id}": {
            "delete": {
                "operationId": "unregisterListener", 
                "summary": "Unregister a listener", 
                "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.", 
                "tags": [
                    "events subscription"
                ], 
                "parameters": [
                    {
                        "name": "id", 
                        "type": "string", 
                        "required": true, 
                        "in": "path", 
                        "description": "The id of the registered listener"
                    }
                ], 
                "responses": {
                    "204": {
                        "description": "Deleted"
                    }, 
                    "405": {
                        "description": "Method not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceCategoryCreateEvent": {
            "post": {
                "operationId": "listenToServiceCategoryCreateEvent", 
                "summary": "Client listener for entity ServiceCategoryCreateEvent", 
                "description": "Example of a client listener for receiving the notification ServiceCategoryCreateEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCategoryCreateEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceCategoryChangeEvent": {
            "post": {
                "operationId": "listenToServiceCategoryChangeEvent", 
                "summary": "Client listener for entity ServiceCategoryChangeEvent", 
                "description": "Example of a client listener for receiving the notification ServiceCategoryChangeEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCategoryChangeEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceCategoryDeleteEvent": {
            "post": {
                "operationId": "listenToServiceCategoryDeleteEvent", 
                "summary": "Client listener for entity ServiceCategoryDeleteEvent", 
                "description": "Example of a client listener for receiving the notification ServiceCategoryDeleteEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCategoryDeleteEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceCatalogCreateEvent": {
            "post": {
                "operationId": "listenToServiceCatalogCreateEvent", 
                "summary": "Client listener for entity ServiceCatalogCreateEvent", 
                "description": "Example of a client listener for receiving the notification ServiceCatalogCreateEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalogCreateEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceCatalogChangeEvent": {
            "post": {
                "operationId": "listenToServiceCatalogChangeEvent", 
                "summary": "Client listener for entity ServiceCatalogChangeEvent", 
                "description": "Example of a client listener for receiving the notification ServiceCatalogChangeEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalogChangeEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceCatalogBatchEvent": {
            "post": {
                "operationId": "listenToServiceCatalogBatchEvent", 
                "summary": "Client listener for entity ServiceCatalogBatchEvent", 
                "description": "Example of a client listener for receiving the notification ServiceCatalogBatchEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalogBatchEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceCatalogDeleteEvent": {
            "post": {
                "operationId": "listenToServiceCatalogDeleteEvent", 
                "summary": "Client listener for entity ServiceCatalogDeleteEvent", 
                "description": "Example of a client listener for receiving the notification ServiceCatalogDeleteEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCatalogDeleteEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceTestCreateEvent": {
            "post": {
                "operationId": "listenToServiceTestCreateEvent", 
                "summary": "Client listener for entity ServiceTestCreateEvent", 
                "description": "Example of a client listener for receiving the notification ServiceTestCreateEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceTestCreateEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceTestAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToServiceTestAttributeValueChangeEvent", 
                "summary": "Client listener for entity ServiceTestAttributeValueChangeEvent", 
                "description": "Example of a client listener for receiving the notification ServiceTestAttributeValueChangeEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceTestAttributeValueChangeEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceTestDeleteEvent": {
            "post": {
                "operationId": "listenToServiceTestDeleteEvent", 
                "summary": "Client listener for entity ServiceTestDeleteEvent", 
                "description": "Example of a client listener for receiving the notification ServiceTestDeleteEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceTestDeleteEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceCreateEvent": {
            "post": {
                "operationId": "listenToServiceCreateEvent", 
                "summary": "Client listener for entity ServiceCreateEvent", 
                "description": "Example of a client listener for receiving the notification ServiceCreateEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCreateEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToServiceAttributeValueChangeEvent", 
                "summary": "Client listener for entity ServiceAttributeValueChangeEvent", 
                "description": "Example of a client listener for receiving the notification ServiceAttributeValueChangeEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceAttributeValueChangeEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceStateChangeEvent": {
            "post": {
                "operationId": "listenToServiceStateChangeEvent", 
                "summary": "Client listener for entity ServiceStateChangeEvent", 
                "description": "Example of a client listener for receiving the notification ServiceStateChangeEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceStateChangeEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceBatchEvent": {
            "post": {
                "operationId": "listenToServiceBatchEvent", 
                "summary": "Client listener for entity ServiceBatchEvent", 
                "description": "Example of a client listener for receiving the notification ServiceBatchEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceBatchEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceDeleteEvent": {
            "post": {
                "operationId": "listenToServiceDeleteEvent", 
                "summary": "Client listener for entity ServiceDeleteEvent", 
                "description": "Example of a client listener for receiving the notification ServiceDeleteEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceDeleteEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceProblemCreateEvent": {
            "post": {
                "operationId": "listenToServiceProblemCreateEvent", 
                "summary": "Client listener for entity ServiceProblemCreateEvent", 
                "description": "Example of a client listener for receiving the notification ServiceProblemCreateEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceProblemCreateEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceProblemStateChangeEvent": {
            "post": {
                "operationId": "listenToServiceProblemStateChangeEvent", 
                "summary": "Client listener for entity ServiceProblemStateChangeEvent", 
                "description": "Example of a client listener for receiving the notification ServiceProblemStateChangeEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceProblemStateChangeEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceProblemAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToServiceProblemAttributeValueChangeEvent", 
                "summary": "Client listener for entity ServiceProblemAttributeValueChangeEvent", 
                "description": "Example of a client listener for receiving the notification ServiceProblemAttributeValueChangeEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceProblemAttributeValueChangeEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceProblemInformationRequiredEvent": {
            "post": {
                "operationId": "listenToServiceProblemInformationRequiredEvent", 
                "summary": "Client listener for entity ServiceProblemInformationRequiredEvent", 
                "description": "Example of a client listener for receiving the notification ServiceProblemInformationRequiredEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceProblemInformationRequiredEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceCandidateCreateEvent": {
            "post": {
                "operationId": "listenToServiceCandidateCreateEvent", 
                "summary": "Client listener for entity ServiceCandidateCreateEvent", 
                "description": "Example of a client listener for receiving the notification ServiceCandidateCreateEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCandidateCreateEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceCandidateChangeEvent": {
            "post": {
                "operationId": "listenToServiceCandidateChangeEvent", 
                "summary": "Client listener for entity ServiceCandidateChangeEvent", 
                "description": "Example of a client listener for receiving the notification ServiceCandidateChangeEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCandidateChangeEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceCandidateDeleteEvent": {
            "post": {
                "operationId": "listenToServiceCandidateDeleteEvent", 
                "summary": "Client listener for entity ServiceCandidateDeleteEvent", 
                "description": "Example of a client listener for receiving the notification ServiceCandidateDeleteEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceCandidateDeleteEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceSpecificationCreateEvent": {
            "post": {
                "operationId": "listenToServiceSpecificationCreateEvent", 
                "summary": "Client listener for entity ServiceSpecificationCreateEvent", 
                "description": "Example of a client listener for receiving the notification ServiceSpecificationCreateEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceSpecificationCreateEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceSpecificationChangeEvent": {
            "post": {
                "operationId": "listenToServiceSpecificationChangeEvent", 
                "summary": "Client listener for entity ServiceSpecificationChangeEvent", 
                "description": "Example of a client listener for receiving the notification ServiceSpecificationChangeEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceSpecificationChangeEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceSpecificationDeleteEvent": {
            "post": {
                "operationId": "listenToServiceSpecificationDeleteEvent", 
                "summary": "Client listener for entity ServiceSpecificationDeleteEvent", 
                "description": "Example of a client listener for receiving the notification ServiceSpecificationDeleteEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceSpecificationDeleteEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceTestSpecificationCreateEvent": {
            "post": {
                "operationId": "listenToServiceTestSpecificationCreateEvent", 
                "summary": "Client listener for entity ServiceTestSpecificationCreateEvent", 
                "description": "Example of a client listener for receiving the notification ServiceTestSpecificationCreateEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecificationCreateEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceTestSpecificationAttributeValueChangeEvent": {
            "post": {
                "operationId": "listenToServiceTestSpecificationAttributeValueChangeEvent", 
                "summary": "Client listener for entity ServiceTestSpecificationAttributeValueChangeEvent", 
                "description": "Example of a client listener for receiving the notification ServiceTestSpecificationAttributeValueChangeEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecificationAttributeValueChangeEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceTestSpecificationDeleteEvent": {
            "post": {
                "operationId": "listenToServiceTestSpecificationDeleteEvent", 
                "summary": "Client listener for entity ServiceTestSpecificationDeleteEvent", 
                "description": "Example of a client listener for receiving the notification ServiceTestSpecificationDeleteEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceTestSpecificationDeleteEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceQualificationCreateEvent": {
            "post": {
                "operationId": "listenToServiceQualificationCreateEvent", 
                "summary": "Client listener for entity ServiceQualificationCreateEvent", 
                "description": "Example of a client listener for receiving the notification ServiceQualificationCreateEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceQualificationCreateEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceQualificationChangeEvent": {
            "post": {
                "operationId": "listenToServiceQualificationChangeEvent", 
                "summary": "Client listener for entity ServiceQualificationChangeEvent", 
                "description": "Example of a client listener for receiving the notification ServiceQualificationChangeEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceQualificationChangeEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/serviceQualificationDeleteEvent": {
            "post": {
                "operationId": "listenToServiceQualificationDeleteEvent", 
                "summary": "Client listener for entity ServiceQualificationDeleteEvent", 
                "description": "Example of a client listener for receiving the notification ServiceQualificationDeleteEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/ServiceQualificationDeleteEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }, 
        "/listener/usageConsumptionReportRequestStateChangeEvent": {
            "post": {
                "operationId": "listenToUsageConsumptionReportRequestStateChangeEvent", 
                "summary": "Client listener for entity UsageConsumptionReportRequestStateChangeEvent", 
                "description": "Example of a client listener for receiving the notification UsageConsumptionReportRequestStateChangeEvent", 
                "tags": [
                    "notification listeners (client side)"
                ], 
                "parameters": [
                    {
                        "schema": {
                            "$ref": "#/definitions/UsageConsumptionReportRequestStateChangeEvent"
                        }, 
                        "description": "The event data", 
                        "required": true, 
                        "name": "data", 
                        "in": "body"
                    }
                ], 
                "responses": {
                    "201": {
                        "description": "Notified", 
                        "schema": {
                            "$ref": "#/definitions/EventSubscription"
                        }
                    }, 
                    "405": {
                        "description": "Method Not allowed", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "404": {
                        "description": "Not Found", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "403": {
                        "description": "Forbidden", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "500": {
                        "description": "Internal Server Error", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "401": {
                        "description": "Unauthorized", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }, 
                    "409": {
                        "description": "Conflict", 
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    }, 
    "definitions": {
        "AlternateServiceProposal": {
            "type": "object", 
            "description": "Alternate service proposal is used when the requested service is not available with characteristic and date asked for. An alternate proposal could be a distinct serviceSpecification close to requested one or same as requested but with a different activation date", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Identifier of a alternate service proposal"
                }, 
                "alternateServiceAvailabilityDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Alternate availability date in case seller is not able to meet requested expected availability date for the service"
                }, 
                "alternateService": {
                    "$ref": "#/definitions/ServiceRestriction"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "Any": {}, 
        "AppliedConsequence": {
            "type": "object", 
            "description": "An Applied Consequence defines the action (prescribed action or notification) to take when a \nMeasureThresholdRuleViolation occurs.", 
            "properties": {
                "appliedAction": {
                    "type": "string", 
                    "description": "The action for a violated threshold. This could be a hyperlink to \nthe action."
                }, 
                "description": {
                    "type": "string", 
                    "description": "A narrative that explains in detail what the consequence is."
                }, 
                "name": {
                    "type": "string", 
                    "description": "A word, term, or phrase by which Consequence is known and \ndistinguished from other MetricDefMeasureConsequences."
                }, 
                "repeatAction": {
                    "type": "boolean", 
                    "description": "An indicator used to specify that a consequence should cease \nbeing applied if a value is in the same range as the previous value or continue being applied if a value is in the same range as the previous value.  \nIf the repeatAction is True, if the consequence is always applied as soon as the MetricMeasure value is in the range of values and if the repeatAction is False, the consequence is applied only if the previous MetricMeasure value was not in the same range."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "AttachmentRef": {
            "type": "object", 
            "description": "Attachment reference. An attachment complements the description of an element (for instance a product) through video, pictures", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique-Identifier for this attachment"
                }, 
                "href": {
                    "type": "string", 
                    "description": "URL serving as reference for the attachment resource"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A narrative text describing the content of the attachment"
                }, 
                "url": {
                    "type": "string", 
                    "description": "Link to the attachment media/content"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "ChangeRequestRef": {
            "type": "object", 
            "description": "Reference to a Change Request", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "The identifier of the change request"
                }, 
                "href": {
                    "type": "string", 
                    "description": "The reference link to the change request"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "Characteristic": {
            "type": "object", 
            "description": "Describes a given characteristic of an object or entity through a name/value pair.", 
            "required": [
                "name", 
                "value"
            ], 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the characteristic"
                }, 
                "valueType": {
                    "type": "string", 
                    "description": "Data type of the value of the characteristic"
                }, 
                "value": {
                    "$ref": "#/definitions/Any", 
                    "description": "The value of the characteristic"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ConsumptionSummary": {
            "type": "object", 
            "description": "The consumption counters (called ConsumptionSummary in the SID model) detail for example the different kind of consumption done on the bucket.", 
            "properties": {
                "counterType": {
                    "type": "string", 
                    "description": "Type of the consumption counter. We can give for example a counter of the used value for a bucket (counterType=used for example) or the value of the consumption done out of the bucket(s) (counterType=outOfBucket for example)"
                }, 
                "level": {
                    "type": "string", 
                    "description": "Counter level. The counter can be given globally for the bucket or detailed by user or by network product for example in case of shared bucket"
                }, 
                "valueName": {
                    "type": "string", 
                    "description": "Value of the counter in a formatted string used for display needs for example"
                }, 
                "consumptionPeriod": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "Consumption counter period between a start date time and an end date time. For prepaid bucket, the period of counters is between the start date of the bucket and the effective date of the usage consumption report generation. For postpaid bucket, the period of counters is between the last bill date and the effective date of the usage consumption report generation."
                }, 
                "product": {
                    "$ref": "#/definitions/NetworkProductRef", 
                    "description": "Public identifier associated to the product for which the consumption counter is detailed. If the level of the counter is global (i.e. concerning all the network products), the list of them is not specified. It can be found through the network products listed in the bucket sub-resource"
                }, 
                "user": {
                    "$ref": "#/definitions/RelatedParty", 
                    "description": "Reference of the user for which the consumption counter is detailed. If the level of the counter is global (i.e. concerning all the users), the list of them is not specified. It can be found through the users listed in the network products of the bucket sub-resource"
                }, 
                "value": {
                    "$ref": "#/definitions/Quantity", 
                    "description": "Numeric value of the bucket counter in a given unit"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "Duration": {
            "type": "object", 
            "description": "A time interval in a given unit of time", 
            "properties": {
                "amount": {
                    "type": "integer", 
                    "description": "Time interval (number of seconds, minutes, hours, etc.)"
                }, 
                "units": {
                    "type": "string", 
                    "description": "Unit of time (seconds, minutes, hours, etc.)"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "EventRef": {
            "type": "object", 
            "description": "Events linked with service problem", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "ID of the event"
                }, 
                "href": {
                    "type": "string", 
                    "description": "event reference"
                }, 
                "eventTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the event occurred"
                }, 
                "eventType": {
                    "type": "string", 
                    "description": "Type of the event"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "ExportJob": {
            "type": "object", 
            "description": "Represents a task used to export resources to a file", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Identifier of the export job"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the export job"
                }, 
                "completionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Data at which the job was completed"
                }, 
                "contentType": {
                    "type": "string", 
                    "description": "The format of the exported data"
                }, 
                "creationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date at which the job was created"
                }, 
                "errorLog": {
                    "type": "string", 
                    "description": "Reason for failure"
                }, 
                "path": {
                    "type": "string", 
                    "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
                }, 
                "query": {
                    "type": "string", 
                    "description": "Used to scope the exported data"
                }, 
                "status": {
                    "type": "string", 
                    "description": "Status of the export job (not started, running, succeeded, failed)"
                }, 
                "url": {
                    "type": "string", 
                    "description": "URL of the file containing the data to be exported"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ExportJob_Create": {
            "type": "object", 
            "description": "Represents a task used to export resources to a file\nSkipped properties: id,href", 
            "required": [
                "url"
            ], 
            "properties": {
                "completionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Data at which the job was completed"
                }, 
                "contentType": {
                    "type": "string", 
                    "description": "The format of the exported data"
                }, 
                "creationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date at which the job was created"
                }, 
                "errorLog": {
                    "type": "string", 
                    "description": "Reason for failure"
                }, 
                "path": {
                    "type": "string", 
                    "description": "URL of the root resource acting as the source for streaming content to the file specified by the export job"
                }, 
                "query": {
                    "type": "string", 
                    "description": "Used to scope the exported data"
                }, 
                "status": {
                    "type": "string", 
                    "description": "Status of the export job (not started, running, succeeded, failed)"
                }, 
                "url": {
                    "type": "string", 
                    "description": "URL of the file containing the data to be exported"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ImpactPattern": {
            "type": "object", 
            "description": "Define the patterns of impact (optional), such as other service characteristics- Used when defining impact through another pattern than the pre-defined attributes", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Basic description of the impact pattern"
                }, 
                "extensionInfo": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "A generic list of any type of elements. Used for extensions or loose element encapsulation from other namespaces"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ImportJob": {
            "type": "object", 
            "description": "Represents a task used to import resources from a file", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Identifier of the import job"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the import job"
                }, 
                "completionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date at which the job was completed"
                }, 
                "contentType": {
                    "type": "string", 
                    "description": "Indicates the format of the imported data"
                }, 
                "creationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date at which the job was created"
                }, 
                "errorLog": {
                    "type": "string", 
                    "description": "Reason for failure if status is failed"
                }, 
                "path": {
                    "type": "string", 
                    "description": "URL of the root resource where the content of the file specified by the import job must be applied"
                }, 
                "status": {
                    "type": "string", 
                    "description": "Status of the import job (not started, running, succeeded, failed)"
                }, 
                "url": {
                    "type": "string", 
                    "description": "URL of the file containing the data to be imported"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ImportJob_Create": {
            "type": "object", 
            "description": "Represents a task used to import resources from a file\nSkipped properties: id,href", 
            "required": [
                "url"
            ], 
            "properties": {
                "completionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date at which the job was completed"
                }, 
                "contentType": {
                    "type": "string", 
                    "description": "Indicates the format of the imported data"
                }, 
                "creationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date at which the job was created"
                }, 
                "errorLog": {
                    "type": "string", 
                    "description": "Reason for failure if status is failed"
                }, 
                "path": {
                    "type": "string", 
                    "description": "URL of the root resource where the content of the file specified by the import job must be applied"
                }, 
                "status": {
                    "type": "string", 
                    "description": "Status of the import job (not started, running, succeeded, failed)"
                }, 
                "url": {
                    "type": "string", 
                    "description": "URL of the file containing the data to be imported"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "MeasureThresholdRuleViolation": {
            "type": "object", 
            "description": "A measureThresholdRuleViolation is a violation of a rule that defines the in the \nMericDefMeasureThresholdRule.", 
            "properties": {
                "conformanceComparatorLower": {
                    "type": "string", 
                    "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to compare with the conformanceTargetLower."
                }, 
                "conformanceComparatorUpper": {
                    "type": "string", 
                    "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to compare with the conformanceTargetUpper."
                }, 
                "conformanceTargetLower": {
                    "type": "string", 
                    "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the lower limit. The value should be less than the conformanceTargetUpper. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
                }, 
                "conformanceTargetUpper": {
                    "type": "string", 
                    "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the Upper limit. The value should be greater than the conformanceTargetLower. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description for the MetricDefMeasureThresholdRule ."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name for the MetricDefMeasureThresholdRule ."
                }, 
                "numberOfAllowedCrossing": {
                    "type": "integer", 
                    "description": "The number of allowed crossing occurrences in reference to the \ntolerancePeriod without a consequence being initiated."
                }, 
                "thresholdRuleSeverity": {
                    "type": "string", 
                    "description": "A threshold can be generated in different severity levels. A \ncrossing for each level may require a different condition and possibly trigger a different consequence."
                }, 
                "appliedConsequence": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/AppliedConsequence"
                    }, 
                    "description": "An Applied Consequence defines the action (prescribed action or notification) to take when a MeasureThresholdRuleViolation occurs."
                }, 
                "tolerancePeriod": {
                    "$ref": "#/definitions/Duration", 
                    "description": "An interval of time of allowed crossing occurrences before a \nconsequence being initiated."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "MetricDefMeasureConsequence": {
            "type": "object", 
            "description": "A MetricDefMeasureConsequence defines the action (prescribed action or notification) to take when a \nMetricDefMeasureThresholdRule is crossed.", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A narrative that explains in detail what the consequence is."
                }, 
                "name": {
                    "type": "string", 
                    "description": "A word, term, or phrase by which a \nMetricDefMeasureConsequence is known and distinguished from other MetricDefMeasureConsequences."
                }, 
                "prescribeAction": {
                    "type": "string", 
                    "description": "Recommended remedy for a violated threshold. This could be \nthe hyperlink to the action."
                }, 
                "repeatAction": {
                    "type": "boolean", 
                    "description": "An indicator used to specify that a consequence should cease \nbeing applied if a value is in the same range as the previous value or continue being applied if a value is in the same range as the previous value. \nIf the repeatAction is True, if the consequence is always applied as soon as the MetricMeasure value is in the range of values and if the repeatAction is False, the consequence is applied only if the previous MetricMeasure value was not in the same range."
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "A valid duration of a thing."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "MetricDefMeasureThresholdRule": {
            "type": "object", 
            "description": "A MetricDefMeasureThresholdRule is a rule that defines the condition (raise or clear) to achieve to apply \nconsequences when a threshold is crossed or ceased to be crossed. It also defines the severity of the \nraise or clear of the threshold.", 
            "properties": {
                "conformanceComparatorLower": {
                    "type": "string", 
                    "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to Service Test Management API REST Specification compare with the conformanceTargetLower."
                }, 
                "conformanceComparatorUpper": {
                    "type": "string", 
                    "description": "An operator that when applied on a value specifies whether a \nthreshold is crossed or ceased to be crossed. This operator is used to compare with the conformanceTargetUpper."
                }, 
                "conformanceTargetLower": {
                    "type": "string", 
                    "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the lower limit. The value should be less than the conformanceTargetUpper. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
                }, 
                "conformanceTargetUpper": {
                    "type": "string", 
                    "description": "A value used to determine if the threshold is crossed or ceases \nto be crossed. It represents the Upper limit. The value should be greater than the conformanceTargetLower. The conformance comparators should also be logically defined so as to not lead to a logically impossible condition."
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description for the MetricDefMeasureThresholdRule ."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name for the MetricDefMeasureThresholdRule ."
                }, 
                "numberOfAllowedCrossing": {
                    "type": "integer", 
                    "description": "The number of allowed crossing occurrences in reference to the \ntolerancePeriod without a consequence being initiated."
                }, 
                "thresholdRuleSeverity": {
                    "type": "string", 
                    "description": "A threshold can be generated in different severity levels. A \ncrossing for each level may require a different condition and possibly trigger a different consequence."
                }, 
                "consequence": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/MetricDefMeasureConsequence"
                    }, 
                    "description": "A list of consequences (actions, notifications) that will arise if the threshold is crossed"
                }, 
                "tolerancePeriod": {
                    "$ref": "#/definitions/Duration", 
                    "description": "An interval of time of allowed crossing occurrences before a consequence being initiated."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "NetworkProduct": {
            "type": "object", 
            "description": "An instantiated network product (specialization of a product) subscribed by a customer.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the network product"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference to the network product"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Network product name"
                }, 
                "publicIdentifier": {
                    "type": "string", 
                    "description": "Public number associated to the network product (msisdn number for mobile line for example)"
                }, 
                "outOfBucketCounter": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ConsumptionSummary"
                    }, 
                    "description": "Counters detailing usage consumption out of the buckets"
                }, 
                "user": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "References of the users of the network product"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "NetworkProductRef": {
            "type": "object", 
            "description": "Reference of a product", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the network product"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference to the network product"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Network product name"
                }, 
                "publicIdentifier": {
                    "type": "string", 
                    "description": "Public number associated to the product (msisdn number for mobile line for example)"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "Generic attribute indicating the name of the class type of the referred resource entity"
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "Note": {
            "type": "object", 
            "description": "Extra information about a given entity", 
            "properties": {
                "author": {
                    "type": "string", 
                    "description": "Author of the note"
                }, 
                "date": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date of the note"
                }, 
                "system": {
                    "type": "string", 
                    "description": "Describes the system from which the action related to this note was done"
                }, 
                "text": {
                    "type": "string", 
                    "description": "Text of the note"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "Place": {
            "type": "object", 
            "description": "Place reference. Place defines the places where the products are sold or delivered.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the place"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Unique reference of the place"
                }, 
                "name": {
                    "type": "string", 
                    "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
                }, 
                "role": {
                    "type": "string", 
                    "description": "Role of the place, such as: [home delivery], [shop retrieval])"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "Quantity": {
            "type": "object", 
            "description": "An amount in a given unit", 
            "properties": {
                "amount": {
                    "default": 1, 
                    "type": "number", 
                    "format": "float", 
                    "description": "Numeric value in a given unit"
                }, 
                "units": {
                    "type": "string", 
                    "description": "Unit"
                }
            }
        }, 
        "RelatedEntityRef": {
            "type": "object", 
            "description": "A reference to an entity, where the type of the entity is not known in advance.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "The identifier of an entity."
                }, 
                "href": {
                    "type": "string", 
                    "description": "The hyperlink to access an entity."
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of an entity."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "RelatedParty": {
            "type": "object", 
            "description": "RelatedParty reference. A related party defines party or party role linked to a specific entity.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of a related party"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the related party, could be a party reference or a party role reference"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the related party"
                }, 
                "role": {
                    "type": "string", 
                    "description": "Role of the related party."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }
        }, 
        "ResourceAlarmRef": {
            "type": "object", 
            "description": "A set of alarm ids identifying the alarms that are underlying this problem.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the Alarm"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the Alarm"
                }, 
                "changeRequest": {
                    "$ref": "#/definitions/ChangeRequestRef"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "ResourceRef": {
            "type": "object", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the supporting resource"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the supporting resource"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the resource supporting the service"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "ResourceSpecificationRef": {
            "type": "object", 
            "description": "Resource Specification reference: The ResourceSpecification is required to realize a ProductSpecification.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the resource specification"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the resource specification"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the requiredResourceSpecification"
                }, 
                "version": {
                    "type": "string", 
                    "description": "Resource specification version"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "SLAViolationRef": {
            "type": "object", 
            "properties": {
                "id": {
                    "type": "string"
                }, 
                "href": {
                    "type": "string"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "Service": {
            "type": "object", 
            "description": "Service is a base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of Service: CustomerFacingService and ResourceFacingService.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the service"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the service"
                }, 
                "category": {
                    "type": "string", 
                    "description": "Is it a customer facing or resource facing service"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Free-text description of the service"
                }, 
                "endDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the service ends"
                }, 
                "hasStarted": {
                    "type": "boolean", 
                    "description": "If TRUE, this Service has already been started"
                }, 
                "isServiceEnabled": {
                    "type": "boolean", 
                    "description": "If FALSE, this particular Service has NOT been enabled for use"
                }, 
                "isStateful": {
                    "type": "boolean", 
                    "description": "If TRUE, this Service can be changed without affecting any other services"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the service"
                }, 
                "serviceDate": {
                    "type": "string", 
                    "description": "Date when the service was created (whatever its status)."
                }, 
                "serviceType": {
                    "type": "string", 
                    "description": "Business type of the service"
                }, 
                "startDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the service starts"
                }, 
                "startMode": {
                    "type": "string", 
                    "description": "This attribute is an enumerated integer that indicates how the Service is started, such as: 0: Unknown; 1: Automatically by the managed environment; 2: Automatically by the owning device; 3: Manually by the Provider of the Service; 4: Manually by a Customer of the Provider; 5: Any of the above"
                }, 
                "note": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "description": "A list of notes made on this service"
                }, 
                "place": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Place"
                    }, 
                    "description": "A list of places related to this service, e.g. where the service is installed, a delivery address for equipment, etc."
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "A list of related party references (RelatedParty [1..*]). A related party defines party or party role linked to a specific entity."
                }, 
                "serviceCharacteristic": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) "
                }, 
                "serviceOrder": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceOrderRef"
                    }, 
                    "description": "A list of service orders related to this service"
                }, 
                "serviceRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRelationship"
                    }, 
                    "description": "A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory (useful for describing relies-on, relies-from between CFS for example)."
                }, 
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef", 
                    "description": "The specification from which this service was instantiated"
                }, 
                "state": {
                    "$ref": "#/definitions/ServiceStateType", 
                    "description": "The life cycle state of the service, such as: feasibilityChecked, designed, reserved, active, inactive, terminated"
                }, 
                "supportingResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources."
                }, 
                "supportingService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "Service_Create": {
            "type": "object", 
            "description": "Service is a base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of Service: CustomerFacingService and ResourceFacingService.\nSkipped properties: id,href", 
            "required": [
                "state", 
                "serviceSpecification"
            ], 
            "properties": {
                "category": {
                    "type": "string", 
                    "description": "Is it a customer facing or resource facing service"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Free-text description of the service"
                }, 
                "endDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the service ends"
                }, 
                "hasStarted": {
                    "type": "boolean", 
                    "description": "If TRUE, this Service has already been started"
                }, 
                "isServiceEnabled": {
                    "type": "boolean", 
                    "description": "If FALSE, this particular Service has NOT been enabled for use"
                }, 
                "isStateful": {
                    "type": "boolean", 
                    "description": "If TRUE, this Service can be changed without affecting any other services"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the service"
                }, 
                "serviceDate": {
                    "type": "string", 
                    "description": "Date when the service was created (whatever its status)."
                }, 
                "serviceType": {
                    "type": "string", 
                    "description": "Business type of the service"
                }, 
                "startDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the service starts"
                }, 
                "startMode": {
                    "type": "string", 
                    "description": "This attribute is an enumerated integer that indicates how the Service is started, such as: 0: Unknown; 1: Automatically by the managed environment; 2: Automatically by the owning device; 3: Manually by the Provider of the Service; 4: Manually by a Customer of the Provider; 5: Any of the above"
                }, 
                "note": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "description": "A list of notes made on this service"
                }, 
                "place": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Place"
                    }, 
                    "description": "A list of places related to this service, e.g. where the service is installed, a delivery address for equipment, etc."
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "A list of related party references (RelatedParty [1..*]). A related party defines party or party role linked to a specific entity."
                }, 
                "serviceCharacteristic": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) "
                }, 
                "serviceOrder": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceOrderRef"
                    }, 
                    "description": "A list of service orders related to this service"
                }, 
                "serviceRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRelationship"
                    }, 
                    "description": "A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory (useful for describing relies-on, relies-from between CFS for example)."
                }, 
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef", 
                    "description": "The specification from which this service was instantiated"
                }, 
                "state": {
                    "$ref": "#/definitions/ServiceStateType", 
                    "description": "The life cycle state of the service, such as: feasibilityChecked, designed, reserved, active, inactive, terminated"
                }, 
                "supportingResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources."
                }, 
                "supportingService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "Service_Update": {
            "type": "object", 
            "description": "Service is a base class for defining the Service hierarchy. All Services are characterized as either being possibly visible and usable by a Customer or not. This gives rise to the two subclasses of Service: CustomerFacingService and ResourceFacingService.\nSkipped properties: id,href,serviceRelationship", 
            "properties": {
                "category": {
                    "type": "string", 
                    "description": "Is it a customer facing or resource facing service"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Free-text description of the service"
                }, 
                "endDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the service ends"
                }, 
                "hasStarted": {
                    "type": "boolean", 
                    "description": "If TRUE, this Service has already been started"
                }, 
                "isServiceEnabled": {
                    "type": "boolean", 
                    "description": "If FALSE, this particular Service has NOT been enabled for use"
                }, 
                "isStateful": {
                    "type": "boolean", 
                    "description": "If TRUE, this Service can be changed without affecting any other services"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the service"
                }, 
                "serviceDate": {
                    "type": "string", 
                    "description": "Date when the service was created (whatever its status)."
                }, 
                "serviceType": {
                    "type": "string", 
                    "description": "Business type of the service"
                }, 
                "startDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the service starts"
                }, 
                "startMode": {
                    "type": "string", 
                    "description": "This attribute is an enumerated integer that indicates how the Service is started, such as: 0: Unknown; 1: Automatically by the managed environment; 2: Automatically by the owning device; 3: Manually by the Provider of the Service; 4: Manually by a Customer of the Provider; 5: Any of the above"
                }, 
                "note": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "description": "A list of notes made on this service"
                }, 
                "place": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Place"
                    }, 
                    "description": "A list of places related to this service, e.g. where the service is installed, a delivery address for equipment, etc."
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "A list of related party references (RelatedParty [1..*]). A related party defines party or party role linked to a specific entity."
                }, 
                "serviceCharacteristic": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) "
                }, 
                "serviceOrder": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceOrderRef"
                    }, 
                    "description": "A list of service orders related to this service"
                }, 
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef", 
                    "description": "The specification from which this service was instantiated"
                }, 
                "state": {
                    "$ref": "#/definitions/ServiceStateType", 
                    "description": "The life cycle state of the service, such as: feasibilityChecked, designed, reserved, active, inactive, terminated"
                }, 
                "supportingResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources."
                }, 
                "supportingService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceCandidate": {
            "type": "object", 
            "description": "ServiceCandidate is an entity that makes a service specification available to a catalog. A\nServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of this REST resource"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Hyperlink reference to this REST resource"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description of this REST resource"
                }, 
                "lastUpdate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date and time of the last update of this REST resource"
                }, 
                "lifecycleStatus": {
                    "type": "string", 
                    "description": "Used to indicate the current lifecycle status of the service candidate."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name given to this REST resource"
                }, 
                "version": {
                    "type": "string", 
                    "description": "the version of service candidate"
                }, 
                "category": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    }, 
                    "description": "List of categories for this candidate"
                }, 
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef", 
                    "description": "The service specification implied by this candidate"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which this REST resource is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceCandidate_Create": {
            "type": "object", 
            "description": "ServiceCandidate is an entity that makes a service specification available to a catalog. A\nServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications.\nSkipped properties: id,href", 
            "required": [
                "name"
            ], 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of this REST resource"
                }, 
                "lastUpdate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date and time of the last update of this REST resource"
                }, 
                "lifecycleStatus": {
                    "type": "string", 
                    "description": "Used to indicate the current lifecycle status of the service candidate."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name given to this REST resource"
                }, 
                "version": {
                    "type": "string", 
                    "description": "the version of service candidate"
                }, 
                "category": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    }, 
                    "description": "List of categories for this candidate"
                }, 
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef", 
                    "description": "The service specification implied by this candidate"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which this REST resource is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceCandidate_Update": {
            "type": "object", 
            "description": "ServiceCandidate is an entity that makes a service specification available to a catalog. A\nServiceCandidate and its associated service specification may be published - made visible - in any number of service catalogs, or in none. One service specification can be composed of other service specifications.\nSkipped properties: id,href,lastUpdate", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of this REST resource"
                }, 
                "lifecycleStatus": {
                    "type": "string", 
                    "description": "Used to indicate the current lifecycle status of the service candidate."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name given to this REST resource"
                }, 
                "version": {
                    "type": "string", 
                    "description": "the version of service candidate"
                }, 
                "category": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    }, 
                    "description": "List of categories for this candidate"
                }, 
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef", 
                    "description": "The service specification implied by this candidate"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which this REST resource is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceCandidateRef": {
            "type": "object", 
            "description": "ServiceCandidate reference. ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the service candidate"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Unique reference of the service candidate"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the service candidate"
                }, 
                "version": {
                    "type": "string", 
                    "description": "Version of the service candidate"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "ServiceCatalog": {
            "type": "object", 
            "description": "The root entity for service catalog management.\nA service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers). \nA service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.\nA ServiceCandidate and its associated ServiceSpecification may be \"published\" - made visible -in any number of ServiceCatalogs, or in none.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the ServiceCatalog"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Unique reference of the service catalog"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description of this catalog"
                }, 
                "lastUpdate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date and time of the last update"
                }, 
                "lifecycleStatus": {
                    "type": "string", 
                    "description": "Used to indicate the current lifecycle status"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the service catalog"
                }, 
                "version": {
                    "type": "string", 
                    "description": "ServiceCatalog version"
                }, 
                "category": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    }, 
                    "description": "List of service categories associated with this catalog"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "List of parties or party roles related to this category"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which the service catalog is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceCatalog_Create": {
            "type": "object", 
            "description": "The root entity for service catalog management.\nA service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers). \nA service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.\nA ServiceCandidate and its associated ServiceSpecification may be \"published\" - made visible -in any number of ServiceCatalogs, or in none.\nSkipped properties: id,href", 
            "required": [
                "name"
            ], 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of this catalog"
                }, 
                "lastUpdate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date and time of the last update"
                }, 
                "lifecycleStatus": {
                    "type": "string", 
                    "description": "Used to indicate the current lifecycle status"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the service catalog"
                }, 
                "version": {
                    "type": "string", 
                    "description": "ServiceCatalog version"
                }, 
                "category": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    }, 
                    "description": "List of service categories associated with this catalog"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "List of parties or party roles related to this category"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which the service catalog is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceCatalog_Update": {
            "type": "object", 
            "description": "The root entity for service catalog management.\nA service catalog is a group of service specifications made available through service candidates that an organization provides to the consumers (internal consumers like its employees or B2B customers or B2C customers). \nA service catalog typically includes name, description and time period that is valid for. It will have a list of ServiceCandidate catalog items. A ServiceCandidate is an entity that makes a ServiceSpecification available to a catalog.\nA ServiceCandidate and its associated ServiceSpecification may be \"published\" - made visible -in any number of ServiceCatalogs, or in none.\nSkipped properties: id,href,lastUpdate", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of this catalog"
                }, 
                "lifecycleStatus": {
                    "type": "string", 
                    "description": "Used to indicate the current lifecycle status"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the service catalog"
                }, 
                "version": {
                    "type": "string", 
                    "description": "ServiceCatalog version"
                }, 
                "category": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    }, 
                    "description": "List of service categories associated with this catalog"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "List of parties or party roles related to this category"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which the service catalog is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceCategory": {
            "type": "object", 
            "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the category"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the category"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description of the category"
                }, 
                "isRoot": {
                    "type": "boolean", 
                    "description": "If true, this Boolean indicates that the category is a root of categories"
                }, 
                "lastUpdate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date and time of the last update"
                }, 
                "lifecycleStatus": {
                    "type": "string", 
                    "description": "Used to indicate the current lifecycle status"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the category"
                }, 
                "parentId": {
                    "type": "string", 
                    "description": "Unique identifier of the parent category"
                }, 
                "version": {
                    "type": "string", 
                    "description": "ServiceCategory version"
                }, 
                "category": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    }, 
                    "description": "List of child categories in the tree for in this category"
                }, 
                "serviceCandidate": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceCandidateRef"
                    }, 
                    "description": "List of service candidates associated with this category"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which the category is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceCategory_Create": {
            "type": "object", 
            "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories.\nSkipped properties: id,href", 
            "required": [
                "name"
            ], 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of the category"
                }, 
                "isRoot": {
                    "type": "boolean", 
                    "description": "If true, this Boolean indicates that the category is a root of categories"
                }, 
                "lastUpdate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date and time of the last update"
                }, 
                "lifecycleStatus": {
                    "type": "string", 
                    "description": "Used to indicate the current lifecycle status"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the category"
                }, 
                "parentId": {
                    "type": "string", 
                    "description": "Unique identifier of the parent category"
                }, 
                "version": {
                    "type": "string", 
                    "description": "ServiceCategory version"
                }, 
                "category": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    }, 
                    "description": "List of child categories in the tree for in this category"
                }, 
                "serviceCandidate": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceCandidateRef"
                    }, 
                    "description": "List of service candidates associated with this category"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which the category is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceCategory_Update": {
            "type": "object", 
            "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories.\nSkipped properties: id,href,lastUpdate", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of the category"
                }, 
                "isRoot": {
                    "type": "boolean", 
                    "description": "If true, this Boolean indicates that the category is a root of categories"
                }, 
                "lifecycleStatus": {
                    "type": "string", 
                    "description": "Used to indicate the current lifecycle status"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the category"
                }, 
                "parentId": {
                    "type": "string", 
                    "description": "Unique identifier of the parent category"
                }, 
                "version": {
                    "type": "string", 
                    "description": "ServiceCategory version"
                }, 
                "category": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceCategoryRef"
                    }, 
                    "description": "List of child categories in the tree for in this category"
                }, 
                "serviceCandidate": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceCandidateRef"
                    }, 
                    "description": "List of service candidates associated with this category"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which the category is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceCategoryRef": {
            "type": "object", 
            "description": "The (service) category resource is used to group service candidates in logical containers. Categories can contain other categories.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of category"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Hypertext Reference of the category"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the category."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "ServiceEligibilityUnavailabilityReason": {
            "type": "object", 
            "description": "Reason for eligibility result if the ServiceQualification result is no (meaning the Service is not available)", 
            "properties": {
                "code": {
                    "type": "string", 
                    "description": "Unavailability reason code"
                }, 
                "label": {
                    "type": "string", 
                    "description": "Unavailability reason label"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceLevelSpecificationRef": {
            "type": "object", 
            "description": "A Service Level Specification represents a pre-defined or negotiated set of Service Level \nObjectives. In addition, certain consequences are associated with not meeting the Service Level \nObjectives. Service Level Agreements are expressed in terms of Service Level Specifications.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "The identifier to a service level specification."
                }, 
                "href": {
                    "type": "string", 
                    "description": "The hyperlink to access a service level specification."
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of Service Level Specification"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "ServiceOrderRef": {
            "type": "object", 
            "description": "Service Order reference. Useful to understand the which was the Service order through which the service was instantiated in the service inventory", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the Service Order"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the Service Order"
                }, 
                "serviceOrderItemId": {
                    "type": "string", 
                    "description": "Unique identifier of the Service Order Item within a service order, not populated if this is a reference to a service order"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "ServiceProblem": {
            "type": "object", 
            "description": "The problem information for Middle B which is abstracted in the service layer from the issued event information by First B", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Identifier of the service problem"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference to the Service Problem"
                }, 
                "affectedNumberOfServices": {
                    "type": "integer", 
                    "description": "Number of affected services"
                }, 
                "category": {
                    "type": "string", 
                    "description": "Classifier for the problem. Settable. For example, this is used for distinguish the category of problem originator in [role].[category] format. Example: serviceProvider.declarer, supplier.originated, system.originated"
                }, 
                "correlationId": {
                    "type": "string", 
                    "description": "Additional identifier coming from an external system"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Free form text describing the Service Problem"
                }, 
                "impactImportanceFactor": {
                    "type": "string", 
                    "description": "Impact Importance is characterized by an Impact Importance Factor: overall importance of the impact of all the affected services, e.g. 0 (zero impact) to 100 (worst impact). The Impact Importance is a calculated field which is set by the OSS determining the impact."
                }, 
                "originatingSystem": {
                    "type": "string", 
                    "description": "Indicates where the problem was generated"
                }, 
                "priority": {
                    "type": "integer", 
                    "description": "An indication varying from 1 (highest) to 10 (lowest) of how important it is for the service provider to correct the Service Problem."
                }, 
                "problemEscalation": {
                    "type": "string", 
                    "description": "Indicates if this service problem has been escalated or not. Possible values are 0 to 10. A value of zero means no escalation. The meanings of values 1-10 are to be determined by the user of the interface, but they show increasing levels of escalation."
                }, 
                "reason": {
                    "type": "string", 
                    "description": "Free text or optionally structured text. It can be Unknown."
                }, 
                "resolutionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was resolved"
                }, 
                "status": {
                    "type": "string", 
                    "description": "The current status of the service problem. Possible values are Submitted, Rejected, Acknowledged, In Progress [Held, Pending], Resolved, Closed, and Cancelled."
                }, 
                "statusChangeDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last status changed"
                }, 
                "statusChangeReason": {
                    "type": "string", 
                    "description": "The reason of state change"
                }, 
                "timeChanged": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last changed"
                }, 
                "timeRaised": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was raised"
                }, 
                "affectedLocation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Place"
                    }, 
                    "description": "A list of the locations affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "affectedResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "A list of the resources affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "affectedService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "List of affected services. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "associatedSLAViolation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/SLAViolationRef"
                    }, 
                    "description": "A List of SLA violations associated with this problem."
                }, 
                "associatedTroubleTicket": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TroubleTicketRef"
                    }, 
                    "description": "A list of trouble tickets associated with this problem."
                }, 
                "comment": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "description": "A list of comments or notes made on the problem"
                }, 
                "extensionInfo": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
                }, 
                "firstAlert": {
                    "$ref": "#/definitions/RelatedEntityRef", 
                    "description": "Indicates what first alerted the system to the problem. It is not the root cause of the Service Problem. Examples: Threshold crossing alert"
                }, 
                "impactPatterns": {
                    "$ref": "#/definitions/ImpactPattern", 
                    "description": "Define the patterns of impact (optional)- e.g. other service characteristics- Used when defining impact through another pattern than the predefined attributes."
                }, 
                "originatorParty": {
                    "$ref": "#/definitions/RelatedParty", 
                    "description": "Individual or organization that created the problem"
                }, 
                "parentProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "The parent problem to which this problem is attached."
                }, 
                "relatedEvent": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/EventRef"
                    }, 
                    "description": "List of events associated to this problem"
                }, 
                "relatedObject": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedEntityRef"
                    }, 
                    "description": "List of objects associated to this problem"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "List of parties or party roles playing a role within the service problem"
                }, 
                "responsibleParty": {
                    "$ref": "#/definitions/RelatedParty", 
                    "description": "Individual or organization responsible for handling this problem"
                }, 
                "rootCauseResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "Resource(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable)."
                }, 
                "rootCauseService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "Service(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable)"
                }, 
                "trackingRecord": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }, 
                    "description": "List of tracking records that allow the tracking of modifications on the problem.The tracking records should not be embedded in the problem to allow retrieving the problem without the tracking records"
                }, 
                "underlyingAlarm": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceAlarmRef"
                    }, 
                    "description": "A list of alarms underlying this problem."
                }, 
                "underlyingProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "A list of underlying problems. Relevant only if this problem is derived from other problems."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceProblem_Create": {
            "type": "object", 
            "description": "The problem information for Middle B which is abstracted in the service layer from the issued event information by First B\nSkipped properties: id,href", 
            "required": [
                "category", 
                "priority", 
                "description", 
                "reason", 
                "originatorParty"
            ], 
            "properties": {
                "affectedNumberOfServices": {
                    "type": "integer", 
                    "description": "Number of affected services"
                }, 
                "category": {
                    "type": "string", 
                    "description": "Classifier for the problem. Settable. For example, this is used for distinguish the category of problem originator in [role].[category] format. Example: serviceProvider.declarer, supplier.originated, system.originated"
                }, 
                "correlationId": {
                    "type": "string", 
                    "description": "Additional identifier coming from an external system"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Free form text describing the Service Problem"
                }, 
                "impactImportanceFactor": {
                    "type": "string", 
                    "description": "Impact Importance is characterized by an Impact Importance Factor: overall importance of the impact of all the affected services, e.g. 0 (zero impact) to 100 (worst impact). The Impact Importance is a calculated field which is set by the OSS determining the impact."
                }, 
                "originatingSystem": {
                    "type": "string", 
                    "description": "Indicates where the problem was generated"
                }, 
                "priority": {
                    "type": "integer", 
                    "description": "An indication varying from 1 (highest) to 10 (lowest) of how important it is for the service provider to correct the Service Problem."
                }, 
                "problemEscalation": {
                    "type": "string", 
                    "description": "Indicates if this service problem has been escalated or not. Possible values are 0 to 10. A value of zero means no escalation. The meanings of values 1-10 are to be determined by the user of the interface, but they show increasing levels of escalation."
                }, 
                "reason": {
                    "type": "string", 
                    "description": "Free text or optionally structured text. It can be Unknown."
                }, 
                "resolutionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was resolved"
                }, 
                "status": {
                    "type": "string", 
                    "description": "The current status of the service problem. Possible values are Submitted, Rejected, Acknowledged, In Progress [Held, Pending], Resolved, Closed, and Cancelled."
                }, 
                "statusChangeDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last status changed"
                }, 
                "statusChangeReason": {
                    "type": "string", 
                    "description": "The reason of state change"
                }, 
                "timeChanged": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last changed"
                }, 
                "timeRaised": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was raised"
                }, 
                "affectedLocation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Place"
                    }, 
                    "description": "A list of the locations affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "affectedResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "A list of the resources affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "affectedService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "List of affected services. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "associatedSLAViolation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/SLAViolationRef"
                    }, 
                    "description": "A List of SLA violations associated with this problem."
                }, 
                "associatedTroubleTicket": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TroubleTicketRef"
                    }, 
                    "description": "A list of trouble tickets associated with this problem."
                }, 
                "comment": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "description": "A list of comments or notes made on the problem"
                }, 
                "extensionInfo": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
                }, 
                "firstAlert": {
                    "$ref": "#/definitions/RelatedEntityRef", 
                    "description": "Indicates what first alerted the system to the problem. It is not the root cause of the Service Problem. Examples: Threshold crossing alert"
                }, 
                "impactPatterns": {
                    "$ref": "#/definitions/ImpactPattern", 
                    "description": "Define the patterns of impact (optional)- e.g. other service characteristics- Used when defining impact through another pattern than the predefined attributes."
                }, 
                "originatorParty": {
                    "$ref": "#/definitions/RelatedParty", 
                    "description": "Individual or organization that created the problem"
                }, 
                "parentProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "The parent problem to which this problem is attached."
                }, 
                "relatedEvent": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/EventRef"
                    }, 
                    "description": "List of events associated to this problem"
                }, 
                "relatedObject": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedEntityRef"
                    }, 
                    "description": "List of objects associated to this problem"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "List of parties or party roles playing a role within the service problem"
                }, 
                "responsibleParty": {
                    "$ref": "#/definitions/RelatedParty", 
                    "description": "Individual or organization responsible for handling this problem"
                }, 
                "rootCauseResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "Resource(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable)."
                }, 
                "rootCauseService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "Service(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable)"
                }, 
                "trackingRecord": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TrackingRecord"
                    }, 
                    "description": "List of tracking records that allow the tracking of modifications on the problem.The tracking records should not be embedded in the problem to allow retrieving the problem without the tracking records"
                }, 
                "underlyingAlarm": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceAlarmRef"
                    }, 
                    "description": "A list of alarms underlying this problem."
                }, 
                "underlyingProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "A list of underlying problems. Relevant only if this problem is derived from other problems."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceProblem_Update": {
            "type": "object", 
            "description": "The problem information for Middle B which is abstracted in the service layer from the issued event information by First B\nSkipped properties: id,href,correlationId,firstAlert,originatingSystem,timeRaised,trackingRecord", 
            "properties": {
                "affectedNumberOfServices": {
                    "type": "integer", 
                    "description": "Number of affected services"
                }, 
                "category": {
                    "type": "string", 
                    "description": "Classifier for the problem. Settable. For example, this is used for distinguish the category of problem originator in [role].[category] format. Example: serviceProvider.declarer, supplier.originated, system.originated"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Free form text describing the Service Problem"
                }, 
                "impactImportanceFactor": {
                    "type": "string", 
                    "description": "Impact Importance is characterized by an Impact Importance Factor: overall importance of the impact of all the affected services, e.g. 0 (zero impact) to 100 (worst impact). The Impact Importance is a calculated field which is set by the OSS determining the impact."
                }, 
                "priority": {
                    "type": "integer", 
                    "description": "An indication varying from 1 (highest) to 10 (lowest) of how important it is for the service provider to correct the Service Problem."
                }, 
                "problemEscalation": {
                    "type": "string", 
                    "description": "Indicates if this service problem has been escalated or not. Possible values are 0 to 10. A value of zero means no escalation. The meanings of values 1-10 are to be determined by the user of the interface, but they show increasing levels of escalation."
                }, 
                "reason": {
                    "type": "string", 
                    "description": "Free text or optionally structured text. It can be Unknown."
                }, 
                "resolutionDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was resolved"
                }, 
                "status": {
                    "type": "string", 
                    "description": "The current status of the service problem. Possible values are Submitted, Rejected, Acknowledged, In Progress [Held, Pending], Resolved, Closed, and Cancelled."
                }, 
                "statusChangeDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last status changed"
                }, 
                "statusChangeReason": {
                    "type": "string", 
                    "description": "The reason of state change"
                }, 
                "timeChanged": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Time the problem was last changed"
                }, 
                "affectedLocation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Place"
                    }, 
                    "description": "A list of the locations affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "affectedResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "A list of the resources affected by the problem. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "affectedService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "List of affected services. At least one of affectedResource, affectedService or affectedLocation should be present."
                }, 
                "associatedSLAViolation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/SLAViolationRef"
                    }, 
                    "description": "A List of SLA violations associated with this problem."
                }, 
                "associatedTroubleTicket": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TroubleTicketRef"
                    }, 
                    "description": "A list of trouble tickets associated with this problem."
                }, 
                "comment": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Note"
                    }, 
                    "description": "A list of comments or notes made on the problem"
                }, 
                "extensionInfo": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
                }, 
                "impactPatterns": {
                    "$ref": "#/definitions/ImpactPattern", 
                    "description": "Define the patterns of impact (optional)- e.g. other service characteristics- Used when defining impact through another pattern than the predefined attributes."
                }, 
                "originatorParty": {
                    "$ref": "#/definitions/RelatedParty", 
                    "description": "Individual or organization that created the problem"
                }, 
                "parentProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "The parent problem to which this problem is attached."
                }, 
                "relatedEvent": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/EventRef"
                    }, 
                    "description": "List of events associated to this problem"
                }, 
                "relatedObject": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedEntityRef"
                    }, 
                    "description": "List of objects associated to this problem"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "List of parties or party roles playing a role within the service problem"
                }, 
                "responsibleParty": {
                    "$ref": "#/definitions/RelatedParty", 
                    "description": "Individual or organization responsible for handling this problem"
                }, 
                "rootCauseResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "Resource(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable)."
                }, 
                "rootCauseService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "Service(s) that are associated to the underlying service problems that are the Root Cause of this one if any (used only if applicable)"
                }, 
                "underlyingAlarm": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceAlarmRef"
                    }, 
                    "description": "A list of alarms underlying this problem."
                }, 
                "underlyingProblem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceProblemRef"
                    }, 
                    "description": "A list of underlying problems. Relevant only if this problem is derived from other problems."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceProblemRef": {
            "type": "object", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the Problem"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the Problem"
                }, 
                "correlationId": {
                    "type": "string", 
                    "description": "Additional identifier coming from an external system"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "ServiceQualification": {
            "type": "object", 
            "description": "ServiceQualification is used to perform a technical eligibility. It allows to retrieve a list of services that are technically available in the context of the interaction (place, party, service characteristics, ...).", 
            "required": [
                "serviceQualificationItem"
            ], 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the serviceQualification resource"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Hyperlink to access the serviceQualification"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description of the serviceQualification"
                }, 
                "effectiveQualificationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Effective date to serviceQualification completion"
                }, 
                "estimatedResponseDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the requester expect to provide an answer for the qualification request."
                }, 
                "expectedQualificationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "A date (DateTime). Deadline date when the requester expected a qualification answer."
                }, 
                "expirationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the qualification response expires"
                }, 
                "externalId": {
                    "type": "string", 
                    "description": "Identifier provided by the requester"
                }, 
                "provideAlternative": {
                    "type": "boolean", 
                    "description": "When the value is TRUE means that alternative solutions should be provided"
                }, 
                "provideOnlyAvailable": {
                    "type": "boolean", 
                    "description": "When the value is TRUE means that only available service must be listed in the response"
                }, 
                "provideUnavailabilityReason": {
                    "type": "boolean", 
                    "description": "When the value is TRUE means that unavailability reason are expected for non available service."
                }, 
                "qualificationResult": {
                    "type": "string", 
                    "description": "Qualification result for this serviceQualification. It could be:  qualified (all qualification item are qualified), alternate (At least one item alternate and no item with  unqualified), unqualified (At least one item unqualified)"
                }, 
                "serviceQualificationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the serviceQualification was submitted"
                }, 
                "state": {
                    "type": "string", 
                    "description": "State of the serviceQualification (acknowledged, inProgress, terminatedWithError, done)"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "A list of related party references, defines party or party role linked to this request."
                }, 
                "serviceQualificationItem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceQualificationItem"
                    }, 
                    "minItems": 1, 
                    "description": "A list of service qualification items."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceQualification_Create": {
            "type": "object", 
            "description": "ServiceQualification is used to perform a technical eligibility. It allows to retrieve a list of services that are technically available in the context of the interaction (place, party, service characteristics, ...).\nSkipped properties: id,href", 
            "required": [
                "serviceQualificationItem"
            ], 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of the serviceQualification"
                }, 
                "effectiveQualificationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Effective date to serviceQualification completion"
                }, 
                "estimatedResponseDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the requester expect to provide an answer for the qualification request."
                }, 
                "expectedQualificationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "A date (DateTime). Deadline date when the requester expected a qualification answer."
                }, 
                "expirationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the qualification response expires"
                }, 
                "externalId": {
                    "type": "string", 
                    "description": "Identifier provided by the requester"
                }, 
                "provideAlternative": {
                    "type": "boolean", 
                    "description": "When the value is TRUE means that alternative solutions should be provided"
                }, 
                "provideOnlyAvailable": {
                    "type": "boolean", 
                    "description": "When the value is TRUE means that only available service must be listed in the response"
                }, 
                "provideUnavailabilityReason": {
                    "type": "boolean", 
                    "description": "When the value is TRUE means that unavailability reason are expected for non available service."
                }, 
                "qualificationResult": {
                    "type": "string", 
                    "description": "Qualification result for this serviceQualification. It could be:  qualified (all qualification item are qualified), alternate (At least one item alternate and no item with  unqualified), unqualified (At least one item unqualified)"
                }, 
                "serviceQualificationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the serviceQualification was submitted"
                }, 
                "state": {
                    "type": "string", 
                    "description": "State of the serviceQualification (acknowledged, inProgress, terminatedWithError, done)"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "A list of related party references, defines party or party role linked to this request."
                }, 
                "serviceQualificationItem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceQualificationItem"
                    }, 
                    "minItems": 1, 
                    "description": "A list of service qualification items."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceQualification_Update": {
            "type": "object", 
            "description": "ServiceQualification is used to perform a technical eligibility. It allows to retrieve a list of services that are technically available in the context of the interaction (place, party, service characteristics, ...).\nSkipped properties: id,href", 
            "required": [
                "serviceQualificationItem"
            ], 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of the serviceQualification"
                }, 
                "effectiveQualificationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Effective date to serviceQualification completion"
                }, 
                "estimatedResponseDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the requester expect to provide an answer for the qualification request."
                }, 
                "expectedQualificationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "A date (DateTime). Deadline date when the requester expected a qualification answer."
                }, 
                "expirationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the qualification response expires"
                }, 
                "externalId": {
                    "type": "string", 
                    "description": "Identifier provided by the requester"
                }, 
                "provideAlternative": {
                    "type": "boolean", 
                    "description": "When the value is TRUE means that alternative solutions should be provided"
                }, 
                "provideOnlyAvailable": {
                    "type": "boolean", 
                    "description": "When the value is TRUE means that only available service must be listed in the response"
                }, 
                "provideUnavailabilityReason": {
                    "type": "boolean", 
                    "description": "When the value is TRUE means that unavailability reason are expected for non available service."
                }, 
                "qualificationResult": {
                    "type": "string", 
                    "description": "Qualification result for this serviceQualification. It could be:  qualified (all qualification item are qualified), alternate (At least one item alternate and no item with  unqualified), unqualified (At least one item unqualified)"
                }, 
                "serviceQualificationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the serviceQualification was submitted"
                }, 
                "state": {
                    "type": "string", 
                    "description": "State of the serviceQualification (acknowledged, inProgress, terminatedWithError, done)"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "A list of related party references, defines party or party role linked to this request."
                }, 
                "serviceQualificationItem": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceQualificationItem"
                    }, 
                    "minItems": 1, 
                    "description": "A list of service qualification items."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceQualificationItem": {
            "type": "object", 
            "description": "A ServiceQualificationItem relates to a specific service being checked in a qualification operation.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Id of the Service Qualification Item"
                }, 
                "expectedActivationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "The date when the service is expected to be activated"
                }, 
                "expectedServiceAvailabilityDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the requester looks for service availability"
                }, 
                "expirationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the qualification item response expires"
                }, 
                "qualificationResult": {
                    "type": "string", 
                    "description": "Qualification result for serviceQualification item. It could be: - qualified (request service are available), - unqualified (requested not available and not alternate available), - alternate (requested not available but proposal available)"
                }, 
                "state": {
                    "type": "string", 
                    "description": "State of the serviceQualification item (acknowledged, inProgress, terminatedWithError, done)"
                }, 
                "alternateServiceProposal": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/AlternateServiceProposal"
                    }, 
                    "description": "Alternate service proposal is used when the requested service is not available with characteristic and date asked for. An alternate proposal could be a distinct service Spec close to requested one or same as requested but with a different availability date."
                }, 
                "category": {
                    "$ref": "#/definitions/ServiceCategoryRef", 
                    "description": "The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates."
                }, 
                "eligibilityUnavailabilityReason": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceEligibilityUnavailabilityReason"
                    }, 
                    "description": "A list of eligibility unavailability reasons (EligibilityUnavailabilityReason [*]). Reason for eligibility result if the serviceQualification result is no (meaning the service is not available)."
                }, 
                "qualificationItemRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceQualificationItemRelationship"
                    }, 
                    "description": "A list of qualification item relationships used to describe relationship between serviceQualification item from the same serviceQualification."
                }, 
                "qualificationRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceQualificationRelationship"
                    }, 
                    "description": "Structure used to describe relationship between serviceQualification item from the same serviceQualification."
                }, 
                "service": {
                    "$ref": "#/definitions/ServiceRestriction", 
                    "description": "Configure the service characteristics (only configurable characteristics and necessary only if a non default value is selected) and/or identify the service that needs to be modified/deleted."
                }, 
                "terminationError": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TerminationError"
                    }, 
                    "description": "If qualificationItem has not been done properly this lists the error(s) that caused termination of the qualification."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceQualificationItemRelationship": {
            "type": "object", 
            "description": "Structure used to describe relationship between serviceQualification items from the same serviceQualification.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Id of the serviceQualificationItem (from the same serviceQualificationItem)."
                }, 
                "relationshipType": {
                    "type": "string", 
                    "description": "Type of relationship (ex: reliesOn, connectedTo, etc...)"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceQualificationRelationship": {
            "type": "object", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "The id of the target qualification pointed to by this relationship"
                }, 
                "relationshipType": {
                    "type": "string", 
                    "description": "The type of relationship"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceRef": {
            "type": "object", 
            "description": "Service reference, for when Service is used by other entities", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Id of the service"
                }, 
                "href": {
                    "type": "string", 
                    "description": "reference of the service"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "ServiceRelationship": {
            "type": "object", 
            "description": "Describes links with services of the same category (useful for bundled services)", 
            "required": [
                "relationshipType", 
                "service"
            ], 
            "properties": {
                "relationshipType": {
                    "type": "string", 
                    "description": "The type of relationship (e.g. depends on, enables)"
                }, 
                "service": {
                    "$ref": "#/definitions/ServiceRef", 
                    "description": "The service being referred to"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceRestriction": {
            "type": "object", 
            "description": "In the context of a service order and depending on the action requested (add/modify/delete/noChange) this data structure captures the configuration to apply to an existing subscribed service or to a new one", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the service"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the service"
                }, 
                "category": {
                    "type": "string", 
                    "description": "Is it a customer facing or resource facing service"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the service"
                }, 
                "serviceType": {
                    "type": "string", 
                    "description": "Business type of the service"
                }, 
                "place": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Place"
                    }, 
                    "description": "A list of places (Place [*]). Used to define a place useful for the service (for example a delivery geographical place)"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity"
                }, 
                "serviceCharacteristic": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "A list of characteristics that characterize this service (ServiceCharacteristic [*]) "
                }, 
                "serviceRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRelationship"
                    }, 
                    "description": "A list of service relationships (ServiceRelationship [*]). Describes links with other service(s) in the inventory (useful for describing relies-on, relies-from between CFS for example)."
                }, 
                "serviceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef", 
                    "description": "The specification from which this service was instantiated"
                }, 
                "state": {
                    "$ref": "#/definitions/ServiceStateType", 
                    "description": "The life cycle state of the service, such as: [feasibilityChecked], [designed]"
                }, 
                "supportingResource": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceRef"
                    }, 
                    "description": "A list of supporting resources (SupportingResource [*]).Note: only Service of type RFS can be associated with Resources"
                }, 
                "supportingService": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceRef"
                    }, 
                    "description": "A list of supporting services (SupportingService [*]). A collection of services that support this service (bundling, link CFS to RFS)"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceSpecCharRelationship": {
            "type": "object", 
            "description": "An aggregation, migration, substitution, dependency or exclusivity relationship between/among serviceSpecCharacteristics.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the target specification"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Hyperlink reference to the target specification"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the target  characteristic"
                }, 
                "relationshipType": {
                    "type": "string", 
                    "description": "Type of relationship such as aggregation, migration, substitution, dependency, exclusivity"
                }, 
                "role": {
                    "type": "string", 
                    "description": "The association role for this service specification"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which the serviceSpecCharRelationship is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceSpecCharacteristic": {
            "type": "object", 
            "description": "This class represents the key features of this service specification. For example, bandwidth is a characteristic of many different types of services; if bandwidth is a relevant characteristic (e.g., from the point-of-view of a Customer obtaining this Service via a Product) then bandwidth would be a ServiceSpecCharacteristic for that particular Service.", 
            "properties": {
                "configurable": {
                    "type": "boolean", 
                    "description": "If true, the Boolean indicates that the serviceSpecCharacteristic is configurable"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A narrative that explains in detail what the serviceSpecCharacteristic is"
                }, 
                "extensible": {
                    "type": "boolean", 
                    "description": "An indicator that specifies that the values for the characteristic can be extended by adding new values when instantiating a characteristic for an Entity."
                }, 
                "isUnique": {
                    "type": "boolean", 
                    "description": "An indicator that specifies if a value is unique for the specification. Possible values are; \"unique while value is in effect\" and \"unique whether value is in effect or not\""
                }, 
                "maxCardinality": {
                    "type": "integer", 
                    "description": "The maximum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
                }, 
                "minCardinality": {
                    "type": "integer", 
                    "description": "The minimum number of instances a CharacteristicValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
                }, 
                "name": {
                    "type": "string", 
                    "description": "A word, term, or phrase by which this characteristic specification is known and distinguished from other characteristic specifications."
                }, 
                "regex": {
                    "type": "string", 
                    "description": "A rule or principle represented in regular expression used to derive the value of a characteristic value."
                }, 
                "valueType": {
                    "type": "string", 
                    "description": "A kind of value that the characteristic can take on, such as numeric, text and so forth"
                }, 
                "serviceSpecCharRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceSpecCharRelationship"
                    }, 
                    "description": "A list of service spec char relationships (ServiceSpecCharRelationship [*]). An aggregation, migration, substitution, dependency or exclusivity relationship between/among Specification Characteristics."
                }, 
                "serviceSpecCharacteristicValue": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceSpecCharacteristicValue"
                    }, 
                    "description": "A list of service spec characteristic values (ServiceSpecCharacteristicValue [*]). A ServiceSpecCharacteristicValue object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ServiceSpecCharacteristic object. The values of the attributes in the ServiceSpecCharacteristicValue object describe the values of the attributes that a corresponding ServiceSpecCharacteristic object can take on."
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which the serviceSpecCharacteristic is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@valueSchemaLocation": {
                    "type": "string", 
                    "description": "This (optional) field provides a link to the schema describing the value type."
                }
            }
        }, 
        "ServiceSpecCharacteristicValue": {
            "type": "object", 
            "description": "A ServiceSpecCharacteristicValue object is used to define a set of attributes, each of which can be assigned to a corresponding set of attributes in a ServiceSpecCharacteristic object. The values of the attributes in the ServiceSpecCharacteristicValue object describe the values of the attributes that a corresponding ServiceSpecCharacteristic object can take on.", 
            "properties": {
                "isDefault": {
                    "type": "boolean", 
                    "description": "Indicates if the value is the default value for a characteristic"
                }, 
                "rangeInterval": {
                    "type": "string", 
                    "description": "An indicator that specifies the inclusion or exclusion of the valueFrom and valueTo attributes. If applicable, possible values are \"open\", \"closed\", \"closedBottom\" and \"closedTop\"."
                }, 
                "regex": {
                    "type": "string", 
                    "description": "A regular expression constraint for given value"
                }, 
                "unitOfMeasure": {
                    "type": "string", 
                    "description": "A length, surface, volume, dry measure, liquid measure, money, weight, time, and the like. In general, a determinate quantity or magnitude of the kind designated, taken as a standard of comparison for others of the same kind, in assigning to them numerical values, as 1 foot, 1 yard, 1 mile, 1 square foot."
                }, 
                "valueFrom": {
                    "type": "integer", 
                    "description": "The low range value that a characteristic can take on"
                }, 
                "valueTo": {
                    "type": "integer", 
                    "description": "The upper range value that a characteristic can take on"
                }, 
                "valueType": {
                    "type": "string", 
                    "description": "A kind of value that the characteristic can take on, such as numeric, text, and so forth"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period of time for which a value is applicable"
                }, 
                "value": {
                    "$ref": "#/definitions/Any", 
                    "description": "A discrete value that the characteristic can take on, or the actual value of the characteristic"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceSpecRelationship": {
            "type": "object", 
            "description": "A migration, substitution, dependency or exclusivity relationship between/among service specifications.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the target serviceSpecification"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the target serviceSpecification"
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name given to the target service specification instance"
                }, 
                "relationshipType": {
                    "type": "string", 
                    "description": "Type of relationship such as migration, substitution, dependency, exclusivity"
                }, 
                "role": {
                    "type": "string", 
                    "description": "The association role for this service specification"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which the serviceSpecRelationship is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceSpecification": {
            "type": "object", 
            "description": "ServiceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the service specification"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the service specification"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A narrative that explains in detail what the service specification is"
                }, 
                "isBundle": {
                    "type": "boolean", 
                    "description": "isBundle determines whether a ServiceSpecification represents a single ServiceSpecification (false), or a bundle of ServiceSpecification (true)."
                }, 
                "lastUpdate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date and time of the last update of the service specification"
                }, 
                "lifecycleStatus": {
                    "type": "string", 
                    "description": "Used to indicate the current lifecycle status of the service specification"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the service specification"
                }, 
                "version": {
                    "type": "string", 
                    "description": "Service specification version"
                }, 
                "attachment": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/AttachmentRef"
                    }, 
                    "description": "A list of attachments (Attachment [*]). Complements the description of the specification through video, pictures..."
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity."
                }, 
                "resourceSpecification": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRef"
                    }, 
                    "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS)."
                }, 
                "serviceLevelSpecification": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceLevelSpecificationRef"
                    }, 
                    "description": "A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum"
                }, 
                "serviceSpecCharacteristic": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceSpecCharacteristic"
                    }, 
                    "description": "A list of service spec characteristics (ServiceSpecCharacteristic [*]). This class represents the key features of this service specification."
                }, 
                "serviceSpecRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceSpecRelationship"
                    }, 
                    "description": "A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship"
                }, 
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema", 
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which the service specification is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceSpecification_Create": {
            "type": "object", 
            "description": "ServiceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.\nSkipped properties: id,href", 
            "required": [
                "name"
            ], 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A narrative that explains in detail what the service specification is"
                }, 
                "isBundle": {
                    "type": "boolean", 
                    "description": "isBundle determines whether a ServiceSpecification represents a single ServiceSpecification (false), or a bundle of ServiceSpecification (true)."
                }, 
                "lastUpdate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date and time of the last update of the service specification"
                }, 
                "lifecycleStatus": {
                    "type": "string", 
                    "description": "Used to indicate the current lifecycle status of the service specification"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the service specification"
                }, 
                "version": {
                    "type": "string", 
                    "description": "Service specification version"
                }, 
                "attachment": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/AttachmentRef"
                    }, 
                    "description": "A list of attachments (Attachment [*]). Complements the description of the specification through video, pictures..."
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity."
                }, 
                "resourceSpecification": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRef"
                    }, 
                    "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS)."
                }, 
                "serviceLevelSpecification": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceLevelSpecificationRef"
                    }, 
                    "description": "A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum"
                }, 
                "serviceSpecCharacteristic": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceSpecCharacteristic"
                    }, 
                    "description": "A list of service spec characteristics (ServiceSpecCharacteristic [*]). This class represents the key features of this service specification."
                }, 
                "serviceSpecRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceSpecRelationship"
                    }, 
                    "description": "A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship"
                }, 
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema", 
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which the service specification is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceSpecification_Update": {
            "type": "object", 
            "description": "ServiceSpecification is a class that offers characteristics to describe a type of service.\nFunctionally, it acts as a template by which Services may be instantiated. By sharing the same  specification, these services would therefore share the same set of characteristics.\nSkipped properties: id,href,lastUpdate", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A narrative that explains in detail what the service specification is"
                }, 
                "isBundle": {
                    "type": "boolean", 
                    "description": "isBundle determines whether a ServiceSpecification represents a single ServiceSpecification (false), or a bundle of ServiceSpecification (true)."
                }, 
                "lifecycleStatus": {
                    "type": "string", 
                    "description": "Used to indicate the current lifecycle status of the service specification"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the service specification"
                }, 
                "version": {
                    "type": "string", 
                    "description": "Service specification version"
                }, 
                "attachment": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/AttachmentRef"
                    }, 
                    "description": "A list of attachments (Attachment [*]). Complements the description of the specification through video, pictures..."
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "A list of related party references (RelatedParty [*]). A related party defines party or party role linked to a specific entity."
                }, 
                "resourceSpecification": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ResourceSpecificationRef"
                    }, 
                    "description": "A list of resource specification references (ResourceSpecificationRef [*]). The ResourceSpecification is required for a service specification with type ResourceFacingServiceSpecification (RFSS)."
                }, 
                "serviceLevelSpecification": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceLevelSpecificationRef"
                    }, 
                    "description": "A list of service level specifications related to this service specification, and which will need to be satisifiable for corresponding service instances; e.g. Gold, Platinum"
                }, 
                "serviceSpecCharacteristic": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceSpecCharacteristic"
                    }, 
                    "description": "A list of service spec characteristics (ServiceSpecCharacteristic [*]). This class represents the key features of this service specification."
                }, 
                "serviceSpecRelationship": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ServiceSpecRelationship"
                    }, 
                    "description": "A list of service specifications related to this specification, e.g. migration, substitution, dependency or exclusivity relationship"
                }, 
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema", 
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period for which the service specification is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceSpecificationRef": {
            "type": "object", 
            "description": "Service specification reference: ServiceSpecification(s) required to realize a ProductSpecification.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the service specification"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the serviceSpecification"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the requiredServiceSpecification"
                }, 
                "version": {
                    "type": "string", 
                    "description": "Service specification version"
                }, 
                "targetServiceSchema": {
                    "$ref": "#/definitions/TargetServiceSchema", 
                    "description": "A target service schema reference (TargetServiceSchemaRef). The reference object to the schema and type of target service which is described by service specification."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "ServiceStateType": {
            "type": "string", 
            "description": "Valid values for the lifecycle state of the service", 
            "enum": [
                "feasibilityChecked", 
                "designed", 
                "reserved", 
                "inactive", 
                "active", 
                "terminated"
            ]
        }, 
        "ServiceTest": {
            "type": "object", 
            "description": "A service test is an entity that exists for a controlled test invocation on a service. The service \ntest is executed according to a schedule and contains service test configuration parameters that are to be \napplied at execution time, and service test measures that result.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "The identifier of the service test"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Hyperlink to access the service test"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description of the service test"
                }, 
                "endDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "The end date and time of the service test"
                }, 
                "mode": {
                    "type": "string", 
                    "description": "An indication of whether the service test is running in \n\"PROACTIVE\" or \"ONDEMAND\" mode"
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the service test"
                }, 
                "startDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "The start date and time of the service test."
                }, 
                "state": {
                    "type": "string", 
                    "description": "The actual state the service test is in"
                }, 
                "characteristic": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "List of characteristics with values that define the test run"
                }, 
                "relatedService": {
                    "$ref": "#/definitions/ServiceRef", 
                    "description": "The actual service being tested"
                }, 
                "testMeasure": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TestMeasure"
                    }, 
                    "description": "The results of the test in terms of the measured metrics"
                }, 
                "testSpecification": {
                    "$ref": "#/definitions/ServiceTestSpecificationRef", 
                    "description": "The specification for this test"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceTest_Create": {
            "type": "object", 
            "description": "A service test is an entity that exists for a controlled test invocation on a service. The service \ntest is executed according to a schedule and contains service test configuration parameters that are to be \napplied at execution time, and service test measures that result.\nSkipped properties: id,href", 
            "required": [
                "name", 
                "relatedService", 
                "testSpecification"
            ], 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of the service test"
                }, 
                "endDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "The end date and time of the service test"
                }, 
                "mode": {
                    "type": "string", 
                    "description": "An indication of whether the service test is running in \n\"PROACTIVE\" or \"ONDEMAND\" mode"
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the service test"
                }, 
                "startDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "The start date and time of the service test."
                }, 
                "state": {
                    "type": "string", 
                    "description": "The actual state the service test is in"
                }, 
                "characteristic": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "List of characteristics with values that define the test run"
                }, 
                "relatedService": {
                    "$ref": "#/definitions/ServiceRef", 
                    "description": "The actual service being tested"
                }, 
                "testMeasure": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TestMeasure"
                    }, 
                    "description": "The results of the test in terms of the measured metrics"
                }, 
                "testSpecification": {
                    "$ref": "#/definitions/ServiceTestSpecificationRef", 
                    "description": "The specification for this test"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceTest_Update": {
            "type": "object", 
            "description": "A service test is an entity that exists for a controlled test invocation on a service. The service \ntest is executed according to a schedule and contains service test configuration parameters that are to be \napplied at execution time, and service test measures that result.\nSkipped properties: id,href", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of the service test"
                }, 
                "endDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "The end date and time of the service test"
                }, 
                "mode": {
                    "type": "string", 
                    "description": "An indication of whether the service test is running in \n\"PROACTIVE\" or \"ONDEMAND\" mode"
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the service test"
                }, 
                "startDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "The start date and time of the service test."
                }, 
                "state": {
                    "type": "string", 
                    "description": "The actual state the service test is in"
                }, 
                "characteristic": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "List of characteristics with values that define the test run"
                }, 
                "relatedService": {
                    "$ref": "#/definitions/ServiceRef", 
                    "description": "The actual service being tested"
                }, 
                "testMeasure": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TestMeasure"
                    }, 
                    "description": "The results of the test in terms of the measured metrics"
                }, 
                "testSpecification": {
                    "$ref": "#/definitions/ServiceTestSpecificationRef", 
                    "description": "The specification for this test"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceTestSpecification": {
            "type": "object", 
            "description": "The service test specification describes the service test in terms of parameters to be configured and \nmeasures to be taken.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Identifier of a service test specification."
                }, 
                "href": {
                    "type": "string", 
                    "description": "Hyperlink to access a service test specification."
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description of a service test specification."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of a service test specification."
                }, 
                "version": {
                    "type": "string", 
                    "description": "Version of a service test specification "
                }, 
                "relatedServiceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef", 
                    "description": "The related service specification."
                }, 
                "testMeasureDefinition": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TestMeasureDefinition"
                    }, 
                    "description": "A list of definitions for the measurements for the test defined by this specification"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period of time for which this specification is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceTestSpecification_Create": {
            "type": "object", 
            "description": "The service test specification describes the service test in terms of parameters to be configured and \nmeasures to be taken.\nSkipped properties: id,href", 
            "required": [
                "name", 
                "relatedServiceSpecification"
            ], 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of a service test specification."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of a service test specification."
                }, 
                "version": {
                    "type": "string", 
                    "description": "Version of a service test specification "
                }, 
                "relatedServiceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef", 
                    "description": "The related service specification."
                }, 
                "testMeasureDefinition": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TestMeasureDefinition"
                    }, 
                    "description": "A list of definitions for the measurements for the test defined by this specification"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The period of time for which this specification is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceTestSpecification_Update": {
            "type": "object", 
            "description": "The service test specification describes the service test in terms of parameters to be configured and \nmeasures to be taken.\nSkipped properties: id,href,validFor", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of a service test specification."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of a service test specification."
                }, 
                "version": {
                    "type": "string", 
                    "description": "Version of a service test specification "
                }, 
                "relatedServiceSpecification": {
                    "$ref": "#/definitions/ServiceSpecificationRef", 
                    "description": "The related service specification."
                }, 
                "testMeasureDefinition": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/TestMeasureDefinition"
                    }, 
                    "description": "A list of definitions for the measurements for the test defined by this specification"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "ServiceTestSpecificationRef": {
            "type": "object", 
            "description": "The service test specification used by the service test.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Identifier of a service test specification."
                }, 
                "href": {
                    "type": "string", 
                    "description": "Hyperlink to access a service test specification."
                }, 
                "version": {
                    "type": "string", 
                    "description": "Version of a service test specification "
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "TargetServiceSchema": {
            "type": "object", 
            "description": "The reference object to the schema and type of target service which is described by service specification", 
            "required": [
                "@schemaLocation", 
                "@type"
            ], 
            "properties": {
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "This field provides a link to the schema describing the target service"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "Class type of the target service"
                }
            }
        }, 
        "TerminationError": {
            "type": "object", 
            "description": "This indicates an error that caused a qualificationItem to be terminated.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the termination error"
                }, 
                "value": {
                    "type": "string", 
                    "description": "Text to describe the termination error - for example: Unable to proceed to qualification because incomplete information provided"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "TestMeasure": {
            "type": "object", 
            "description": "A TestMeasure specifies a measure of a specific aspect of a product, service, or resource test, such as lost packets or connectivity status", 
            "properties": {
                "accuracy": {
                    "type": "number", 
                    "format": "float", 
                    "description": "The number of digits of accuracy captured for associated Metrics"
                }, 
                "captureDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "The date and time that the metric was captured"
                }, 
                "captureMethod": {
                    "type": "string", 
                    "description": "The method used to capture the Metrics (This may be replaced by a set of entities similar to the Performance Monitoring Ref)"
                }, 
                "metricDescription": {
                    "type": "string", 
                    "description": "Brief description of the metric"
                }, 
                "metricHref": {
                    "type": "string", 
                    "description": "Hyperlink to access a metric for detail information"
                }, 
                "metricName": {
                    "type": "string", 
                    "description": "The name of the metric"
                }, 
                "unitOfMeasure": {
                    "type": "string", 
                    "description": "The unit of measure for the metric values, such as meters, cubic yards, kilograms [ISO 1000]."
                }, 
                "ruleViolation": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/MeasureThresholdRuleViolation"
                    }, 
                    "description": "A list of rules that were violated in this test measure"
                }, 
                "value": {
                    "$ref": "#/definitions/Characteristic", 
                    "description": "The value of Metric in the test. This also could be a document to record all values captured during the service test"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "TestMeasureDefinition": {
            "type": "object", 
            "description": "A TestMeasureDefinition specifies a measure of a specific aspect of a product, service, or resource test, such as lost packets or connectivity status", 
            "properties": {
                "captureFrequency": {
                    "type": "string", 
                    "description": "The frequency of capture for the metric. Note: This may be replaced by a set of entities similar to the Performance Monitoring"
                }, 
                "captureMethod": {
                    "type": "string", 
                    "description": "The method used to capture the Metric. Note: This may be replaced by a set of entities similar to the Performance Monitoring"
                }, 
                "metricDescription": {
                    "type": "string", 
                    "description": "Brief description of the metric"
                }, 
                "metricHref": {
                    "type": "string", 
                    "description": "Hyperlink to access a metric for detail information"
                }, 
                "metricName": {
                    "type": "string", 
                    "description": "The name of a metric that in the test measure"
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the TestMeasureDefinition"
                }, 
                "unitOfMeasure": {
                    "type": "string", 
                    "description": "Name of a service test specification"
                }, 
                "valueType": {
                    "type": "string", 
                    "description": "A kind of value that the Metric value can take on, such as numeric, text, and so forth"
                }, 
                "capturePeriod": {
                    "$ref": "#/definitions/Duration", 
                    "description": "A period of the capture"
                }, 
                "thresholdRule": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/MetricDefMeasureThresholdRule"
                    }, 
                    "description": "The rule(s) associated with the measure threshold"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "The time period for which this definition is valid"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "TimePeriod": {
            "type": "object", 
            "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both", 
            "properties": {
                "endDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "End of the time period, using IETC-RFC-3339 format"
                }, 
                "startDateTime": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Start of the time period, using IETC-RFC-3339 format. If you define a start, you must also define an end"
                }
            }
        }, 
        "TrackingRecord": {
            "type": "object", 
            "description": "Tracking records allow the tracking of modifications on the problem. The tracking records should not be embedded in the problem to allow retrieving the problem without the tracking records", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Identifier of the TrackingRecord"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Describes the action being done, such as: ack, clear"
                }, 
                "systemId": {
                    "type": "string", 
                    "description": "Describes the system Id from which the action was done"
                }, 
                "time": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Describes the time at which the action was done"
                }, 
                "user": {
                    "type": "string", 
                    "description": "Describes the user doing the action"
                }, 
                "extensionInfo": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/Characteristic"
                    }, 
                    "description": "A generic list of any type of elements. Used for vendor Extensions or loose element encapsulation from other namespaces"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "TroubleTicketRef": {
            "type": "object", 
            "description": "A trouble ticket represents a record used for reporting and managing the resolution of resource problems", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the trouble ticket"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the trouble ticket"
                }, 
                "correlationId": {
                    "type": "string", 
                    "description": "Additional identifier coming from an external system"
                }, 
                "status": {
                    "type": "string", 
                    "description": "The current status of the Trouble Ticket"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The actual type of the target instance when needed for disambiguation."
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "UsageConsumptionReport": {
            "type": "object", 
            "description": "An usage consumption report enables to know at a given point the balances and the consumption counters related to various buckets (SMS, Voice, Data for example). It could be calculated for a device identified by a public key (msisdn number for a mobile device for example or PSTN or VOIP number for a fix device), for a subscribed offer or option or for an user.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "The report is calculated at the time of the request by the server. Generally, this report is not recorded by the server. If it is, an unique identifier of the usage consumption report is given by the server"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Hyperlink to access the usage consumption report. The report is calculated at the time of the request by the server. Generally, this report is not recorded by the server. If it is, an unique identifier of the usage consumption report is given by the server"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Free short text describing the usage consumption report content"
                }, 
                "effectiveDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date and time when the usage consumption report was calculated and generated"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Usage consumption report name"
                }, 
                "bucket": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/UsageVolumeProduct"
                    }, 
                    "description": "Bucket(s) included in the offer or option subscribed."
                }, 
                "relatedParty": {
                    "$ref": "#/definitions/RelatedParty"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "UsageConsumptionReportRef": {
            "type": "object", 
            "description": "Reference of an usage consumption report", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the usage consumption report given by the server"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Hyperlink to access the usage consumption report"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Free short text describing the usage consumption report content"
                }, 
                "effectiveDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date and time when the usage consumption report was calculated and generated"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Usage consumption report name"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "The type of the referred entity", 
                    "format": "uri"
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "UsageConsumptionReportRequest": {
            "type": "object", 
            "description": "An UsageConsumptionReportRequest allows to manage the calculation request of an usage consumption report", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the usage consumption report request given by the server"
                }, 
                "href": {
                    "type": "string", 
                    "description": "Reference of the usage consumption report request"
                }, 
                "creationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date and time of the request creation"
                }, 
                "lastUpdate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the status was last changed"
                }, 
                "status": {
                    "type": "string", 
                    "description": "Status of the usage consumption report request (InProgress or done)"
                }, 
                "bucket": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/UsageVolumeProductRef"
                    }, 
                    "description": "Reference of the buckets for which the usage consumption report is requested"
                }, 
                "product": {
                    "$ref": "#/definitions/NetworkProductRef", 
                    "description": "Network product reference for which the usage consumption report is requested"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "Reference and role of the related parties for which the usage consumption report is requested"
                }, 
                "usageConsumptionReport": {
                    "$ref": "#/definitions/UsageConsumptionReportRef", 
                    "description": "References of the usage consumption report (given when it has been calculated and the status of the request is done)"
                }, 
                "validPeriod": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "Validity period"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "UsageConsumptionReportRequest_Create": {
            "type": "object", 
            "description": "An UsageConsumptionReportRequest allows to manage the calculation request of an usage consumption report\nSkipped properties: id,href", 
            "properties": {
                "creationDate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date and time of the request creation"
                }, 
                "lastUpdate": {
                    "type": "string", 
                    "format": "date-time", 
                    "description": "Date when the status was last changed"
                }, 
                "status": {
                    "type": "string", 
                    "description": "Status of the usage consumption report request (InProgress or done)"
                }, 
                "bucket": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/UsageVolumeProductRef"
                    }, 
                    "description": "Reference of the buckets for which the usage consumption report is requested"
                }, 
                "product": {
                    "$ref": "#/definitions/NetworkProductRef", 
                    "description": "Network product reference for which the usage consumption report is requested"
                }, 
                "relatedParty": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/RelatedParty"
                    }, 
                    "description": "Reference and role of the related parties for which the usage consumption report is requested"
                }, 
                "usageConsumptionReport": {
                    "$ref": "#/definitions/UsageConsumptionReportRef", 
                    "description": "References of the usage consumption report (given when it has been calculated and the status of the request is done)"
                }, 
                "validPeriod": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "Validity period"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "UsageVolumeBalance": {
            "type": "object", 
            "description": "The balance (called UsageVolumeBalance in the SID model) defines the remaining allowed product usage quantity in terms of volume, time, currency or events. It corresponds to the initial allowed usage quantity minus the usage consumed on the bucket.", 
            "properties": {
                "remainingValueName": {
                    "type": "string", 
                    "description": "Remaining value in a formatted string for the bucket given in the balance unit (for example 1.9 Gb). This formatted string could be used for display needs for example"
                }, 
                "remainingValue": {
                    "$ref": "#/definitions/Quantity", 
                    "description": "Numeric remaining value for the bucket given in the unit (for example 1.9). This numeric value could be used for calculation for example"
                }, 
                "validFor": {
                    "$ref": "#/definitions/TimePeriod", 
                    "description": "Balance period between a start date time and an end date time. For prepaid bucket, the period of the balance is between the  effective date of the usage consumption report generation and the end date of the bucket. For postpaid bucket, the period of the balance is between the effective date of the usage consumption report generation and the next bill date."
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "UsageVolumeProduct": {
            "type": "object", 
            "description": "A bucket (called UsageVolumeProduct in the SID model) represents a quantity of usage, as 2 hours national calls or 50 sms for example. It could be either a quantity or an amount in a currency (i.e. It could represent a fixed number of SMS, MMS, minutes of calls, quantity of data, number of events as well as a specific amount in a given currency). It requires one or more network products from which usages will debit the bucket.", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the bucket"
                }, 
                "isShared": {
                    "type": "boolean", 
                    "description": "True if the bucket is shared between several devices or users"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Bucket name"
                }, 
                "usageType": {
                    "type": "string", 
                    "description": "Type of usage concerned by the bucket, such as voice, sms, data"
                }, 
                "bucketBalance": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/UsageVolumeBalance"
                    }
                }, 
                "bucketCounter": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/ConsumptionSummary"
                    }
                }, 
                "product": {
                    "type": "array", 
                    "items": {
                        "$ref": "#/definitions/NetworkProduct"
                    }
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }
            }
        }, 
        "UsageVolumeProductRef": {
            "type": "object", 
            "description": "Reference of a bucket", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Unique identifier of the bucket"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Bucket name"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class"
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name"
                }, 
                "@referredType": {
                    "type": "string", 
                    "description": "Generic attribute indicating the name of the class type of the referred resource entity"
                }
            }, 
            "required": [
                "id"
            ]
        }, 
        "EventSubscription": {
            "required": [
                "id", 
                "callback"
            ], 
            "type": "object", 
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "Id of the listener"
                }, 
                "callback": {
                    "type": "string", 
                    "description": "The callback being registered."
                }, 
                "query": {
                    "type": "string", 
                    "description": "additional data to be passed"
                }
            }
        }, 
        "EventSubscriptionInput": {
            "required": [
                "callback"
            ], 
            "type": "object", 
            "description": "Sets the communication endpoint address the service instance must use to deliver notification information", 
            "properties": {
                "callback": {
                    "type": "string", 
                    "description": "The callback being registered."
                }, 
                "query": {
                    "type": "string", 
                    "description": "additional data to be passed"
                }
            }
        }, 
        "ServiceCategoryCreateEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceCategoryCreateEventPayload"
                }
            }
        }, 
        "ServiceCategoryCreateEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceCategory": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceCategory"
                }
            }
        }, 
        "ServiceCategoryChangeEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceCategoryChangeEventPayload"
                }
            }
        }, 
        "ServiceCategoryChangeEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceCategory": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceCategory"
                }
            }
        }, 
        "ServiceCategoryDeleteEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceCategoryDeleteEventPayload"
                }
            }
        }, 
        "ServiceCategoryDeleteEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceCategory": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceCategory"
                }
            }
        }, 
        "ServiceCatalogCreateEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceCatalogCreateEventPayload"
                }
            }
        }, 
        "ServiceCatalogCreateEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceCatalog": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceCatalog"
                }
            }
        }, 
        "ServiceCatalogChangeEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceCatalogChangeEventPayload"
                }
            }
        }, 
        "ServiceCatalogChangeEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceCatalog": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceCatalog"
                }
            }
        }, 
        "ServiceCatalogBatchEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceCatalogBatchEventPayload"
                }
            }
        }, 
        "ServiceCatalogBatchEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceCatalog": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceCatalog"
                }
            }
        }, 
        "ServiceCatalogDeleteEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceCatalogDeleteEventPayload"
                }
            }
        }, 
        "ServiceCatalogDeleteEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceCatalog": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceCatalog"
                }
            }
        }, 
        "ServiceTestCreateEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceTestCreateEventPayload"
                }
            }
        }, 
        "ServiceTestCreateEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceTest": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceTest"
                }
            }
        }, 
        "ServiceTestAttributeValueChangeEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceTestAttributeValueChangeEventPayload"
                }
            }
        }, 
        "ServiceTestAttributeValueChangeEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceTest": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceTest"
                }
            }
        }, 
        "ServiceTestDeleteEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceTestDeleteEventPayload"
                }
            }
        }, 
        "ServiceTestDeleteEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceTest": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceTest"
                }
            }
        }, 
        "ServiceCreateEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceCreateEventPayload"
                }
            }
        }, 
        "ServiceCreateEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "service": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/Service"
                }
            }
        }, 
        "ServiceAttributeValueChangeEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceAttributeValueChangeEventPayload"
                }
            }
        }, 
        "ServiceAttributeValueChangeEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "service": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/Service"
                }
            }
        }, 
        "ServiceStateChangeEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceStateChangeEventPayload"
                }
            }
        }, 
        "ServiceStateChangeEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "service": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/Service"
                }
            }
        }, 
        "ServiceBatchEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceBatchEventPayload"
                }
            }
        }, 
        "ServiceBatchEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "service": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/Service"
                }
            }
        }, 
        "ServiceDeleteEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceDeleteEventPayload"
                }
            }
        }, 
        "ServiceDeleteEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "service": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/Service"
                }
            }
        }, 
        "ServiceProblemCreateEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceProblemCreateEventPayload"
                }
            }
        }, 
        "ServiceProblemCreateEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceProblem": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceProblem"
                }
            }
        }, 
        "ServiceProblemStateChangeEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceProblemStateChangeEventPayload"
                }
            }
        }, 
        "ServiceProblemStateChangeEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceProblem": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceProblem"
                }
            }
        }, 
        "ServiceProblemAttributeValueChangeEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceProblemAttributeValueChangeEventPayload"
                }
            }
        }, 
        "ServiceProblemAttributeValueChangeEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceProblem": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceProblem"
                }
            }
        }, 
        "ServiceProblemInformationRequiredEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceProblemInformationRequiredEventPayload"
                }
            }
        }, 
        "ServiceProblemInformationRequiredEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceProblem": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceProblem"
                }
            }
        }, 
        "ServiceCandidateCreateEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceCandidateCreateEventPayload"
                }
            }
        }, 
        "ServiceCandidateCreateEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceCandidate": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceCandidate"
                }
            }
        }, 
        "ServiceCandidateChangeEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceCandidateChangeEventPayload"
                }
            }
        }, 
        "ServiceCandidateChangeEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceCandidate": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceCandidate"
                }
            }
        }, 
        "ServiceCandidateDeleteEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceCandidateDeleteEventPayload"
                }
            }
        }, 
        "ServiceCandidateDeleteEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceCandidate": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceCandidate"
                }
            }
        }, 
        "ServiceSpecificationCreateEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceSpecificationCreateEventPayload"
                }
            }
        }, 
        "ServiceSpecificationCreateEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceSpecification": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceSpecification"
                }
            }
        }, 
        "ServiceSpecificationChangeEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceSpecificationChangeEventPayload"
                }
            }
        }, 
        "ServiceSpecificationChangeEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceSpecification": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceSpecification"
                }
            }
        }, 
        "ServiceSpecificationDeleteEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceSpecificationDeleteEventPayload"
                }
            }
        }, 
        "ServiceSpecificationDeleteEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceSpecification": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceSpecification"
                }
            }
        }, 
        "ServiceTestSpecificationCreateEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceTestSpecificationCreateEventPayload"
                }
            }
        }, 
        "ServiceTestSpecificationCreateEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceTestSpecification": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceTestSpecification"
                }
            }
        }, 
        "ServiceTestSpecificationAttributeValueChangeEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceTestSpecificationAttributeValueChangeEventPayload"
                }
            }
        }, 
        "ServiceTestSpecificationAttributeValueChangeEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceTestSpecification": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceTestSpecification"
                }
            }
        }, 
        "ServiceTestSpecificationDeleteEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceTestSpecificationDeleteEventPayload"
                }
            }
        }, 
        "ServiceTestSpecificationDeleteEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceTestSpecification": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceTestSpecification"
                }
            }
        }, 
        "ServiceQualificationCreateEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceQualificationCreateEventPayload"
                }
            }
        }, 
        "ServiceQualificationCreateEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceQualification": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceQualification"
                }
            }
        }, 
        "ServiceQualificationChangeEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceQualificationChangeEventPayload"
                }
            }
        }, 
        "ServiceQualificationChangeEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceQualification": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceQualification"
                }
            }
        }, 
        "ServiceQualificationDeleteEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/ServiceQualificationDeleteEventPayload"
                }
            }
        }, 
        "ServiceQualificationDeleteEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "serviceQualification": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/ServiceQualification"
                }
            }
        }, 
        "UsageConsumptionReportRequestStateChangeEvent": {
            "type": "object", 
            "description": "The notification data structure", 
            "properties": {
                "event": {
                    "description": "The event payload linked to the involved resource object", 
                    "$ref": "#/definitions/UsageConsumptionReportRequestStateChangeEventPayload"
                }
            }
        }, 
        "UsageConsumptionReportRequestStateChangeEventPayload": {
            "type": "object", 
            "description": "The event data structure", 
            "properties": {
                "usageConsumptionReportRequest": {
                    "description": "The involved resource data for the event", 
                    "$ref": "#/definitions/UsageConsumptionReportRequest"
                }
            }
        }, 
        "Error": {
            "required": [
                "code", 
                "reason"
            ], 
            "type": "object", 
            "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)", 
            "properties": {
                "code": {
                    "type": "string", 
                    "description": "Application relevant detail, defined in the API or a common list."
                }, 
                "reason": {
                    "type": "string", 
                    "description": "Explanation of the reason for the error which can be shown to a client user."
                }, 
                "message": {
                    "type": "string", 
                    "description": "More details and corrective actions related to the error which can be shown to a client user."
                }, 
                "status": {
                    "type": "string", 
                    "description": "HTTP Error code extension"
                }, 
                "referenceError": {
                    "type": "string", 
                    "description": "URI of documentation describing the error.", 
                    "format": "uri"
                }, 
                "@baseType": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the super-class."
                }, 
                "@schemaLocation": {
                    "type": "string", 
                    "description": "A URI to a JSON-Schema file that defines additional attributes and relationships", 
                    "format": "uri"
                }, 
                "@type": {
                    "type": "string", 
                    "description": "When sub-classing, this defines the sub-class entity name."
                }
            }
        }
    }
}
